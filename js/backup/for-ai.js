// Title:
// Ray collision camera

// Brief:
// Adjusts position of ArcRotateCamera when any objects are in between target and camera

// Description:
// In this code, we create a scene with an ArcRotateCamera, a target object, and an obstruction object. 
// The adjustCameraPosition function is called in the render loop and checks if there is any obstruction between the camera's target and its position. 
// If an obstruction is detected, the camera's position is adjusted to move it away from the obstruction along the camera's ray direction.
// You may need to adjust the code based on your specific setup and requirements.

// Author:
// Generated by an AI and modified by SkyHops

// Import BABYLON
import * as BABYLON from 'babylonjs';

// Get canvas
const canvas = document.getElementById('renderCanvas');
// Create engine
const engine = new BABYLON.Engine(canvas, true);
// Create scene
const scene = new BABYLON.Scene(engine);

// Create arc rotate camera
const camera = new BABYLON.ArcRotateCamera('camera', 0, 0, 10, new BABYLON.Vector3(0, 0, 0), scene);
camera.setPosition(new BABYLON.Vector3(0, 0, -10));
camera.attachControl(canvas, false);

// Create target object
const target = BABYLON.MeshBuilder.CreateSphere('target', { diameter: 1 }, scene);
target.position = new BABYLON.Vector3(0, 0, 0);

// Create obstruction object
const obstruction = BABYLON.MeshBuilder.CreateBox('obstruction', { size: 2 }, scene);
obstruction.position = new BABYLON.Vector3(0, 0, -5);

// Function to adjust camera position when obstruction is in between
function adjustCameraPosition() {
  const ray = new BABYLON.Ray(camera.position, camera.target.subtract(camera.position));
  const pickInfo = scene.pickWithRay(ray);
  
  if (pickInfo.hit && pickInfo.pickedMesh !== target) {
    let distance = pickInfo.distance - 0.5; // Adjust the distance to leave some space between the obstruction and the camera
    const newPosition = camera.position.add(ray.direction.multiplyByFloats(distance, distance, distance));
    camera.setPosition(newPosition);
  }
}

// Render loop
engine.runRenderLoop(function () {
  // Adjust camera position
  adjustCameraPosition();
  
  // Render scene
  scene.render();
});

// Window resize event
window.addEventListener('resize', function () {
  engine.resize();
});

{"version":3,"file":"babylonjs.materials.min.js","mappings":"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","sources":["webpack://MATERIALS/webpack/universalModuleDefinition","webpack://MATERIALS/external umd {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://MATERIALS/webpack/bootstrap","webpack://MATERIALS/webpack/runtime/define property getters","webpack://MATERIALS/webpack/runtime/global","webpack://MATERIALS/webpack/runtime/hasOwnProperty shorthand","webpack://MATERIALS/webpack/runtime/make namespace object","webpack://MATERIALS/../../../../node_modules/tslib/tslib.es6.mjs","webpack://MATERIALS/../../../lts/materials/generated/cell/cell.fragment.ts","webpack://MATERIALS/../../../lts/materials/generated/cell/cell.vertex.ts","webpack://MATERIALS/../../../lts/materials/generated/cell/cellMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/custom/customMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/custom/pbrCustomMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/fire/fire.fragment.ts","webpack://MATERIALS/../../../lts/materials/generated/fire/fire.vertex.ts","webpack://MATERIALS/../../../lts/materials/generated/fire/fireMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/fur/fur.fragment.ts","webpack://MATERIALS/../../../lts/materials/generated/fur/fur.vertex.ts","webpack://MATERIALS/../../../lts/materials/generated/fur/furMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/gradient/gradient.fragment.ts","webpack://MATERIALS/../../../lts/materials/generated/gradient/gradient.vertex.ts","webpack://MATERIALS/../../../lts/materials/generated/gradient/gradientMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/grid/grid.fragment.ts","webpack://MATERIALS/../../../lts/materials/generated/grid/grid.vertex.ts","webpack://MATERIALS/../../../lts/materials/generated/grid/gridMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/lava/lava.fragment.ts","webpack://MATERIALS/../../../lts/materials/generated/lava/lava.vertex.ts","webpack://MATERIALS/../../../lts/materials/generated/lava/lavaMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/mix/mix.fragment.ts","webpack://MATERIALS/../../../lts/materials/generated/mix/mix.vertex.ts","webpack://MATERIALS/../../../lts/materials/generated/mix/mixMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/normal/normal.fragment.ts","webpack://MATERIALS/../../../lts/materials/generated/normal/normal.vertex.ts","webpack://MATERIALS/../../../lts/materials/generated/normal/normalMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/shadowOnly/shadowOnly.fragment.ts","webpack://MATERIALS/../../../lts/materials/generated/shadowOnly/shadowOnly.vertex.ts","webpack://MATERIALS/../../../lts/materials/generated/shadowOnly/shadowOnlyMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/simple/simple.fragment.ts","webpack://MATERIALS/../../../lts/materials/generated/simple/simple.vertex.ts","webpack://MATERIALS/../../../lts/materials/generated/simple/simpleMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/sky/sky.fragment.ts","webpack://MATERIALS/../../../lts/materials/generated/sky/sky.vertex.ts","webpack://MATERIALS/../../../lts/materials/generated/sky/skyMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/terrain/terrain.fragment.ts","webpack://MATERIALS/../../../lts/materials/generated/terrain/terrain.vertex.ts","webpack://MATERIALS/../../../lts/materials/generated/terrain/terrainMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/triPlanar/triplanar.fragment.ts","webpack://MATERIALS/../../../lts/materials/generated/triPlanar/triplanar.vertex.ts","webpack://MATERIALS/../../../lts/materials/generated/triPlanar/triPlanarMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/water/water.fragment.ts","webpack://MATERIALS/../../../lts/materials/generated/water/water.vertex.ts","webpack://MATERIALS/../../../lts/materials/generated/water/waterMaterial.ts","webpack://MATERIALS/../../../lts/materials/generated/legacy/legacy.ts","webpack://MATERIALS/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-materials\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-materials\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"MATERIALS\"] = factory(root[\"BABYLON\"]);\n})((typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this), (__WEBPACK_EXTERNAL_MODULE__520__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__520__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n};\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/helperFunctions\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"core/Shaders/ShadersInclude/depthPrePass\";\nimport \"core/Shaders/ShadersInclude/lightFragment\";\nimport \"core/Shaders/ShadersInclude/fogFragment\";\nimport \"core/Shaders/ShadersInclude/imageProcessingCompatibility\";\n\nconst name = \"cellPixelShader\";\nconst shader = `precision highp float;\runiform vec4 vEyePosition;\runiform vec4 vDiffuseColor;\rvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\r#endif\n#include<helperFunctions>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\runiform sampler2D diffuseSampler;\runiform vec2 vDiffuseInfos;\r#endif\n#include<clipPlaneFragmentDeclaration>\n#include<fogFragmentDeclaration>\nvec3 computeCustomDiffuseLighting(lightingInfo info,vec3 diffuseBase,float shadow)\r{\rdiffuseBase=info.diffuse*shadow;\r#ifdef CELLBASIC\nfloat level=1.0;\rif (info.ndl<0.5)\rlevel=0.5;\rdiffuseBase.rgb*vec3(level,level,level);\r#else\nfloat ToonThresholds[4];\rToonThresholds[0]=0.95;\rToonThresholds[1]=0.5;\rToonThresholds[2]=0.2;\rToonThresholds[3]=0.03;\rfloat ToonBrightnessLevels[5];\rToonBrightnessLevels[0]=1.0;\rToonBrightnessLevels[1]=0.8;\rToonBrightnessLevels[2]=0.6;\rToonBrightnessLevels[3]=0.35;\rToonBrightnessLevels[4]=0.2;\rif (info.ndl>ToonThresholds[0])\r{\rdiffuseBase.rgb*=ToonBrightnessLevels[0];\r}\relse if (info.ndl>ToonThresholds[1])\r{\rdiffuseBase.rgb*=ToonBrightnessLevels[1];\r}\relse if (info.ndl>ToonThresholds[2])\r{\rdiffuseBase.rgb*=ToonBrightnessLevels[2];\r}\relse if (info.ndl>ToonThresholds[3])\r{\rdiffuseBase.rgb*=ToonBrightnessLevels[3];\r}\relse\r{\rdiffuseBase.rgb*=ToonBrightnessLevels[4];\r}\r#endif\nreturn max(diffuseBase,vec3(0.2));\r}\r#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\r{\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);\rvec4 baseColor=vec4(1.,1.,1.,1.);\rvec3 diffuseColor=vDiffuseColor.rgb;\rfloat alpha=vDiffuseColor.a;\r#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\r#ifdef ALPHATEST\nif (baseColor.a<0.4)\rdiscard;\r#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\r#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\r#endif\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\r#else\nvec3 normalW=vec3(1.0,1.0,1.0);\r#endif\nlightingInfo info;\rvec3 diffuseBase=vec3(0.,0.,0.);\rfloat shadow=1.;\rfloat glossiness=0.;\r#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\r#endif \n#include<lightFragment>[0..maxSimultaneousLights]\n#if defined(VERTEXALPHA) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nalpha*=vColor.a;\r#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\rvec4 color=vec4(finalDiffuse,alpha);\r#include<fogFragment>\ngl_FragColor=color;\r#include<imageProcessingCompatibility>\n#define CUSTOM_FRAGMENT_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const cellPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesVertex\";\nimport \"core/Shaders/ShadersInclude/bonesVertex\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimation\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"core/Shaders/ShadersInclude/fogVertex\";\nimport \"core/Shaders/ShadersInclude/shadowsVertex\";\nimport \"core/Shaders/ShadersInclude/vertexColorMixing\";\n\nconst name = \"cellVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\r#ifdef NORMAL\nattribute vec3 normal;\r#endif\n#ifdef UV1\nattribute vec2 uv;\r#endif\n#ifdef UV2\nattribute vec2 uv2;\r#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\r#endif\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<instancesDeclaration>\nuniform mat4 view;\runiform mat4 viewProjection;\r#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\runiform mat4 diffuseMatrix;\runiform vec2 vDiffuseInfos;\r#endif\n#ifdef POINTSIZE\nuniform float pointSize;\r#endif\nvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\r#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_VERTEX_MAIN_BEGIN\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(position,1.0);\rgl_Position=viewProjection*worldPos;\rvPositionW=vec3(worldPos);\r#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\r#endif\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\r#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\r#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x==0.)\r{\rvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\r}\relse\r{\rvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\r}\r#endif\n#include<clipPlaneVertex>\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n#include<vertexColorMixing>\n#if defined(POINTSIZE) && !defined(WEBGPU)\ngl_PointSize=pointSize;\r#endif\n#define CUSTOM_VERTEX_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const cellVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\n\r\nimport \"./cell.fragment\";\r\nimport \"./cell.vertex\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\r\n\r\nclass CellMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n    public NDOTL = true;\r\n    public CUSTOMUSERLIGHTING = true;\r\n    public CELLBASIC = true;\r\n    public DEPTHPREPASS = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class CellMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize(\"computeHighLevel\")\r\n    public _computeHighLevel: boolean = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public computeHighLevel: boolean;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new CellMaterialDefines();\r\n        }\r\n\r\n        const defines = <CellMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // High level\r\n        defines.CELLBASIC = !this.computeHighLevel;\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            const shaderName = \"cell\";\r\n            const join = defines.toString();\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vLightsType\",\r\n                \"vDiffuseColor\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"diffuseMatrix\",\r\n            ];\r\n            const samplers = [\"diffuseSampler\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            addClipPlaneUniforms(uniforms);\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights,\r\n            });\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights - 1 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <CellMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n            }\r\n\r\n            // Clip plane\r\n            bindClipPlane(this._activeEffect, this, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            scene.bindEyePosition(effect);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = [];\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return this._diffuseTexture === texture;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._diffuseTexture) {\r\n            this._diffuseTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"CellMaterial\";\r\n    }\r\n\r\n    public clone(name: string): CellMaterial {\r\n        return SerializationHelper.Clone<CellMaterial>(() => new CellMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.CellMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): CellMaterial {\r\n        return SerializationHelper.Parse(() => new CellMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.CellMaterial\", CellMaterial);\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport { Effect } from \"core/Materials/effect\";\r\nimport type { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\nexport class CustomShaderStructure {\r\n    public FragmentStore: string;\r\n    public VertexStore: string;\r\n\r\n    constructor() {}\r\n}\r\n\r\nexport class ShaderSpecialParts {\r\n    constructor() {}\r\n\r\n    public Fragment_Begin: string;\r\n    public Fragment_Definitions: string;\r\n    public Fragment_MainBegin: string;\r\n    public Fragment_MainEnd: string;\r\n\r\n    // diffuseColor\r\n    public Fragment_Custom_Diffuse: string;\r\n    // lights\r\n    public Fragment_Before_Lights: string;\r\n    // fog\r\n    public Fragment_Before_Fog: string;\r\n    // alpha\r\n    public Fragment_Custom_Alpha: string;\r\n\r\n    public Fragment_Before_FragColor: string;\r\n\r\n    public Vertex_Begin: string;\r\n    public Vertex_Definitions: string;\r\n    public Vertex_MainBegin: string;\r\n\r\n    // positionUpdated\r\n    public Vertex_Before_PositionUpdated: string;\r\n\r\n    // normalUpdated\r\n    public Vertex_Before_NormalUpdated: string;\r\n\r\n    // worldPosComputed\r\n    public Vertex_After_WorldPosComputed: string;\r\n\r\n    // mainEnd\r\n    public Vertex_MainEnd: string;\r\n}\r\n\r\nexport class CustomMaterial extends StandardMaterial {\r\n    public static ShaderIndexer = 1;\r\n    public CustomParts: ShaderSpecialParts;\r\n    _isCreatedShader: boolean;\r\n    _createdShaderName: string;\r\n    _customUniform: string[];\r\n    _newUniforms: string[];\r\n    _newUniformInstances: { [name: string]: any };\r\n    _newSamplerInstances: { [name: string]: Texture };\r\n    _customAttributes: string[];\r\n\r\n    public FragmentShader: string;\r\n    public VertexShader: string;\r\n\r\n    public AttachAfterBind(mesh: Mesh | undefined, effect: Effect) {\r\n        if (this._newUniformInstances) {\r\n            for (const el in this._newUniformInstances) {\r\n                const ea = el.toString().split(\"-\");\r\n                if (ea[0] == \"vec2\") {\r\n                    effect.setVector2(ea[1], this._newUniformInstances[el]);\r\n                } else if (ea[0] == \"vec3\") {\r\n                    effect.setVector3(ea[1], this._newUniformInstances[el]);\r\n                } else if (ea[0] == \"vec4\") {\r\n                    effect.setVector4(ea[1], this._newUniformInstances[el]);\r\n                } else if (ea[0] == \"mat4\") {\r\n                    effect.setMatrix(ea[1], this._newUniformInstances[el]);\r\n                } else if (ea[0] == \"float\") {\r\n                    effect.setFloat(ea[1], this._newUniformInstances[el]);\r\n                }\r\n            }\r\n        }\r\n        if (this._newSamplerInstances) {\r\n            for (const el in this._newSamplerInstances) {\r\n                const ea = el.toString().split(\"-\");\r\n                if (ea[0] == \"sampler2D\" && this._newSamplerInstances[el].isReady && this._newSamplerInstances[el].isReady()) {\r\n                    effect.setTexture(ea[1], this._newSamplerInstances[el]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public ReviewUniform(name: string, arr: string[]): string[] {\r\n        if (name == \"uniform\" && this._newUniforms) {\r\n            for (let ind = 0; ind < this._newUniforms.length; ind++) {\r\n                if (this._customUniform[ind].indexOf(\"sampler\") == -1) {\r\n                    arr.push(this._newUniforms[ind].replace(/\\[\\d*\\]/g, \"\"));\r\n                }\r\n            }\r\n        }\r\n        if (name == \"sampler\" && this._newUniforms) {\r\n            for (let ind = 0; ind < this._newUniforms.length; ind++) {\r\n                if (this._customUniform[ind].indexOf(\"sampler\") != -1) {\r\n                    arr.push(this._newUniforms[ind].replace(/\\[\\d*\\]/g, \"\"));\r\n                }\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    public Builder(shaderName: string, uniforms: string[], uniformBuffers: string[], samplers: string[], defines: MaterialDefines | string[], attributes?: string[]): string {\r\n        if (attributes && this._customAttributes && this._customAttributes.length > 0) {\r\n            attributes.push(...this._customAttributes);\r\n        }\r\n\r\n        this.ReviewUniform(\"uniform\", uniforms);\r\n        this.ReviewUniform(\"sampler\", samplers);\r\n\r\n        if (this._isCreatedShader) {\r\n            return this._createdShaderName;\r\n        }\r\n        this._isCreatedShader = false;\r\n\r\n        CustomMaterial.ShaderIndexer++;\r\n        const name: string = \"custom_\" + CustomMaterial.ShaderIndexer;\r\n\r\n        const fn_afterBind = this._afterBind.bind(this);\r\n        this._afterBind = (m, e) => {\r\n            if (!e) {\r\n                return;\r\n            }\r\n            this.AttachAfterBind(m, e);\r\n            try {\r\n                fn_afterBind(m, e);\r\n            } catch (e) {}\r\n        };\r\n\r\n        Effect.ShadersStore[name + \"VertexShader\"] = this.VertexShader.replace(\"#define CUSTOM_VERTEX_BEGIN\", this.CustomParts.Vertex_Begin ? this.CustomParts.Vertex_Begin : \"\")\r\n            .replace(\r\n                \"#define CUSTOM_VERTEX_DEFINITIONS\",\r\n                (this._customUniform ? this._customUniform.join(\"\\n\") : \"\") + (this.CustomParts.Vertex_Definitions ? this.CustomParts.Vertex_Definitions : \"\")\r\n            )\r\n            .replace(\"#define CUSTOM_VERTEX_MAIN_BEGIN\", this.CustomParts.Vertex_MainBegin ? this.CustomParts.Vertex_MainBegin : \"\")\r\n            .replace(\"#define CUSTOM_VERTEX_UPDATE_POSITION\", this.CustomParts.Vertex_Before_PositionUpdated ? this.CustomParts.Vertex_Before_PositionUpdated : \"\")\r\n            .replace(\"#define CUSTOM_VERTEX_UPDATE_NORMAL\", this.CustomParts.Vertex_Before_NormalUpdated ? this.CustomParts.Vertex_Before_NormalUpdated : \"\")\r\n            .replace(\"#define CUSTOM_VERTEX_MAIN_END\", this.CustomParts.Vertex_MainEnd ? this.CustomParts.Vertex_MainEnd : \"\");\r\n\r\n        if (this.CustomParts.Vertex_After_WorldPosComputed) {\r\n            Effect.ShadersStore[name + \"VertexShader\"] = Effect.ShadersStore[name + \"VertexShader\"].replace(\r\n                \"#define CUSTOM_VERTEX_UPDATE_WORLDPOS\",\r\n                this.CustomParts.Vertex_After_WorldPosComputed\r\n            );\r\n        }\r\n\r\n        Effect.ShadersStore[name + \"PixelShader\"] = this.FragmentShader.replace(\r\n            \"#define CUSTOM_FRAGMENT_BEGIN\",\r\n            this.CustomParts.Fragment_Begin ? this.CustomParts.Fragment_Begin : \"\"\r\n        )\r\n            .replace(\"#define CUSTOM_FRAGMENT_MAIN_BEGIN\", this.CustomParts.Fragment_MainBegin ? this.CustomParts.Fragment_MainBegin : \"\")\r\n            .replace(\r\n                \"#define CUSTOM_FRAGMENT_DEFINITIONS\",\r\n                (this._customUniform ? this._customUniform.join(\"\\n\") : \"\") + (this.CustomParts.Fragment_Definitions ? this.CustomParts.Fragment_Definitions : \"\")\r\n            )\r\n            .replace(\"#define CUSTOM_FRAGMENT_UPDATE_DIFFUSE\", this.CustomParts.Fragment_Custom_Diffuse ? this.CustomParts.Fragment_Custom_Diffuse : \"\")\r\n            .replace(\"#define CUSTOM_FRAGMENT_UPDATE_ALPHA\", this.CustomParts.Fragment_Custom_Alpha ? this.CustomParts.Fragment_Custom_Alpha : \"\")\r\n            .replace(\"#define CUSTOM_FRAGMENT_BEFORE_LIGHTS\", this.CustomParts.Fragment_Before_Lights ? this.CustomParts.Fragment_Before_Lights : \"\")\r\n            .replace(\"#define CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\", this.CustomParts.Fragment_Before_FragColor ? this.CustomParts.Fragment_Before_FragColor : \"\")\r\n            .replace(\"#define CUSTOM_FRAGMENT_MAIN_END\", this.CustomParts.Fragment_MainEnd ? this.CustomParts.Fragment_MainEnd : \"\");\r\n\r\n        if (this.CustomParts.Fragment_Before_Fog) {\r\n            Effect.ShadersStore[name + \"PixelShader\"] = Effect.ShadersStore[name + \"PixelShader\"].replace(\r\n                \"#define CUSTOM_FRAGMENT_BEFORE_FOG\",\r\n                this.CustomParts.Fragment_Before_Fog\r\n            );\r\n        }\r\n\r\n        this._isCreatedShader = true;\r\n        this._createdShaderName = name;\r\n\r\n        return name;\r\n    }\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.CustomParts = new ShaderSpecialParts();\r\n        this.customShaderNameResolve = this.Builder;\r\n\r\n        this.FragmentShader = Effect.ShadersStore[\"defaultPixelShader\"];\r\n        this.VertexShader = Effect.ShadersStore[\"defaultVertexShader\"];\r\n    }\r\n\r\n    public AddUniform(name: string, kind: string, param: any): CustomMaterial {\r\n        if (!this._customUniform) {\r\n            this._customUniform = new Array();\r\n            this._newUniforms = new Array();\r\n            this._newSamplerInstances = {};\r\n            this._newUniformInstances = {};\r\n        }\r\n        if (param) {\r\n            if (kind.indexOf(\"sampler\") != -1) {\r\n                (<any>this._newSamplerInstances)[kind + \"-\" + name] = param;\r\n            } else {\r\n                (<any>this._newUniformInstances)[kind + \"-\" + name] = param;\r\n            }\r\n        }\r\n        this._customUniform.push(\"uniform \" + kind + \" \" + name + \";\");\r\n        this._newUniforms.push(name);\r\n\r\n        return this;\r\n    }\r\n\r\n    public AddAttribute(name: string): CustomMaterial {\r\n        if (!this._customAttributes) {\r\n            this._customAttributes = [];\r\n        }\r\n\r\n        this._customAttributes.push(name);\r\n\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Begin(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Fragment_Begin = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Definitions(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Fragment_Definitions = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Fragment_MainBegin(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Fragment_MainBegin = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Fragment_MainEnd(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Fragment_MainEnd = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Custom_Diffuse(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Fragment_Custom_Diffuse = shaderPart.replace(\"result\", \"diffuseColor\");\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Custom_Alpha(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Fragment_Custom_Alpha = shaderPart.replace(\"result\", \"alpha\");\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Before_Lights(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Fragment_Before_Lights = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Before_Fog(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Fragment_Before_Fog = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Before_FragColor(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Fragment_Before_FragColor = shaderPart.replace(\"result\", \"color\");\r\n        return this;\r\n    }\r\n\r\n    public Vertex_Begin(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Vertex_Begin = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Vertex_Definitions(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Vertex_Definitions = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Vertex_MainBegin(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Vertex_MainBegin = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Vertex_Before_PositionUpdated(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Vertex_Before_PositionUpdated = shaderPart.replace(\"result\", \"positionUpdated\");\r\n        return this;\r\n    }\r\n\r\n    public Vertex_Before_NormalUpdated(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Vertex_Before_NormalUpdated = shaderPart.replace(\"result\", \"normalUpdated\");\r\n        return this;\r\n    }\r\n\r\n    public Vertex_After_WorldPosComputed(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Vertex_After_WorldPosComputed = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Vertex_MainEnd(shaderPart: string): CustomMaterial {\r\n        this.CustomParts.Vertex_MainEnd = shaderPart;\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.CustomMaterial\", CustomMaterial);\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport { Effect } from \"core/Materials/effect\";\r\nimport type { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { ShaderCodeInliner } from \"core/Engines/Processors/shaderCodeInliner\";\r\nimport type { ICustomShaderNameResolveOptions } from \"core/Materials/material\";\r\n\r\nexport class ShaderAlebdoParts {\r\n    constructor() {}\r\n\r\n    public Fragment_Begin: string;\r\n    public Fragment_Definitions: string;\r\n    public Fragment_MainBegin: string;\r\n    public Fragment_MainEnd: string;\r\n\r\n    // albedoColor\r\n    public Fragment_Custom_Albedo: string;\r\n    // lights\r\n    public Fragment_Before_Lights: string;\r\n    // roughness\r\n    public Fragment_Custom_MetallicRoughness: string;\r\n    // microsurface\r\n    public Fragment_Custom_MicroSurface: string;\r\n    // fog\r\n    public Fragment_Before_Fog: string;\r\n    // alpha\r\n    public Fragment_Custom_Alpha: string;\r\n    // color composition\r\n    public Fragment_Before_FinalColorComposition: string;\r\n    // frag color\r\n    public Fragment_Before_FragColor: string;\r\n\r\n    public Vertex_Begin: string;\r\n    public Vertex_Definitions: string;\r\n    public Vertex_MainBegin: string;\r\n\r\n    // positionUpdated\r\n    public Vertex_Before_PositionUpdated: string;\r\n\r\n    // normalUpdated\r\n    public Vertex_Before_NormalUpdated: string;\r\n\r\n    // worldPosComputed\r\n    public Vertex_After_WorldPosComputed: string;\r\n\r\n    // mainEnd\r\n    public Vertex_MainEnd: string;\r\n}\r\n\r\nexport class PBRCustomMaterial extends PBRMaterial {\r\n    public static ShaderIndexer = 1;\r\n    public CustomParts: ShaderAlebdoParts;\r\n    _isCreatedShader: boolean;\r\n    _createdShaderName: string;\r\n    _customUniform: string[];\r\n    _newUniforms: string[];\r\n    _newUniformInstances: { [name: string]: any };\r\n    _newSamplerInstances: { [name: string]: Texture };\r\n    _customAttributes: string[];\r\n\r\n    public FragmentShader: string;\r\n    public VertexShader: string;\r\n\r\n    public AttachAfterBind(mesh: Mesh | undefined, effect: Effect) {\r\n        if (this._newUniformInstances) {\r\n            for (const el in this._newUniformInstances) {\r\n                const ea = el.toString().split(\"-\");\r\n                if (ea[0] == \"vec2\") {\r\n                    effect.setVector2(ea[1], this._newUniformInstances[el]);\r\n                } else if (ea[0] == \"vec3\") {\r\n                    effect.setVector3(ea[1], this._newUniformInstances[el]);\r\n                } else if (ea[0] == \"vec4\") {\r\n                    effect.setVector4(ea[1], this._newUniformInstances[el]);\r\n                } else if (ea[0] == \"mat4\") {\r\n                    effect.setMatrix(ea[1], this._newUniformInstances[el]);\r\n                } else if (ea[0] == \"float\") {\r\n                    effect.setFloat(ea[1], this._newUniformInstances[el]);\r\n                }\r\n            }\r\n        }\r\n        if (this._newSamplerInstances) {\r\n            for (const el in this._newSamplerInstances) {\r\n                const ea = el.toString().split(\"-\");\r\n                if (ea[0] == \"sampler2D\" && this._newSamplerInstances[el].isReady && this._newSamplerInstances[el].isReady()) {\r\n                    effect.setTexture(ea[1], this._newSamplerInstances[el]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public ReviewUniform(name: string, arr: string[]): string[] {\r\n        if (name == \"uniform\" && this._newUniforms) {\r\n            for (let ind = 0; ind < this._newUniforms.length; ind++) {\r\n                if (this._customUniform[ind].indexOf(\"sampler\") == -1) {\r\n                    arr.push(this._newUniforms[ind].replace(/\\[\\d*\\]/g, \"\"));\r\n                }\r\n            }\r\n        }\r\n        if (name == \"sampler\" && this._newUniforms) {\r\n            for (let ind = 0; ind < this._newUniforms.length; ind++) {\r\n                if (this._customUniform[ind].indexOf(\"sampler\") != -1) {\r\n                    arr.push(this._newUniforms[ind].replace(/\\[\\d*\\]/g, \"\"));\r\n                }\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    public Builder(\r\n        shaderName: string,\r\n        uniforms: string[],\r\n        uniformBuffers: string[],\r\n        samplers: string[],\r\n        defines: MaterialDefines | string[],\r\n        attributes?: string[],\r\n        options?: ICustomShaderNameResolveOptions\r\n    ): string {\r\n        if (options) {\r\n            const currentProcessing = options.processFinalCode;\r\n            options.processFinalCode = (type: string, code: string) => {\r\n                if (type === \"vertex\") {\r\n                    return currentProcessing ? currentProcessing(type, code) : code;\r\n                }\r\n                const sci = new ShaderCodeInliner(code);\r\n                sci.inlineToken = \"#define pbr_inline\";\r\n                sci.processCode();\r\n                return currentProcessing ? currentProcessing(type, sci.code) : sci.code;\r\n            };\r\n        }\r\n\r\n        if (attributes && this._customAttributes && this._customAttributes.length > 0) {\r\n            attributes.push(...this._customAttributes);\r\n        }\r\n\r\n        this.ReviewUniform(\"uniform\", uniforms);\r\n        this.ReviewUniform(\"sampler\", samplers);\r\n\r\n        if (this._isCreatedShader) {\r\n            return this._createdShaderName;\r\n        }\r\n        this._isCreatedShader = false;\r\n\r\n        PBRCustomMaterial.ShaderIndexer++;\r\n        const name: string = \"custom_\" + PBRCustomMaterial.ShaderIndexer;\r\n\r\n        const fn_afterBind = this._afterBind.bind(this);\r\n        this._afterBind = (m, e) => {\r\n            if (!e) {\r\n                return;\r\n            }\r\n            this.AttachAfterBind(m, e);\r\n            try {\r\n                fn_afterBind(m, e);\r\n            } catch (e) {}\r\n        };\r\n\r\n        Effect.ShadersStore[name + \"VertexShader\"] = this.VertexShader.replace(\"#define CUSTOM_VERTEX_BEGIN\", this.CustomParts.Vertex_Begin ? this.CustomParts.Vertex_Begin : \"\")\r\n            .replace(\r\n                \"#define CUSTOM_VERTEX_DEFINITIONS\",\r\n                (this._customUniform ? this._customUniform.join(\"\\n\") : \"\") + (this.CustomParts.Vertex_Definitions ? this.CustomParts.Vertex_Definitions : \"\")\r\n            )\r\n            .replace(\"#define CUSTOM_VERTEX_MAIN_BEGIN\", this.CustomParts.Vertex_MainBegin ? this.CustomParts.Vertex_MainBegin : \"\")\r\n            .replace(\"#define CUSTOM_VERTEX_UPDATE_POSITION\", this.CustomParts.Vertex_Before_PositionUpdated ? this.CustomParts.Vertex_Before_PositionUpdated : \"\")\r\n            .replace(\"#define CUSTOM_VERTEX_UPDATE_NORMAL\", this.CustomParts.Vertex_Before_NormalUpdated ? this.CustomParts.Vertex_Before_NormalUpdated : \"\")\r\n            .replace(\"#define CUSTOM_VERTEX_MAIN_END\", this.CustomParts.Vertex_MainEnd ? this.CustomParts.Vertex_MainEnd : \"\");\r\n\r\n        if (this.CustomParts.Vertex_After_WorldPosComputed) {\r\n            Effect.ShadersStore[name + \"VertexShader\"] = Effect.ShadersStore[name + \"VertexShader\"].replace(\r\n                \"#define CUSTOM_VERTEX_UPDATE_WORLDPOS\",\r\n                this.CustomParts.Vertex_After_WorldPosComputed\r\n            );\r\n        }\r\n\r\n        Effect.ShadersStore[name + \"PixelShader\"] = this.FragmentShader.replace(\r\n            \"#define CUSTOM_FRAGMENT_BEGIN\",\r\n            this.CustomParts.Fragment_Begin ? this.CustomParts.Fragment_Begin : \"\"\r\n        )\r\n            .replace(\"#define CUSTOM_FRAGMENT_MAIN_BEGIN\", this.CustomParts.Fragment_MainBegin ? this.CustomParts.Fragment_MainBegin : \"\")\r\n            .replace(\r\n                \"#define CUSTOM_FRAGMENT_DEFINITIONS\",\r\n                (this._customUniform ? this._customUniform.join(\"\\n\") : \"\") + (this.CustomParts.Fragment_Definitions ? this.CustomParts.Fragment_Definitions : \"\")\r\n            )\r\n            .replace(\"#define CUSTOM_FRAGMENT_UPDATE_ALBEDO\", this.CustomParts.Fragment_Custom_Albedo ? this.CustomParts.Fragment_Custom_Albedo : \"\")\r\n            .replace(\"#define CUSTOM_FRAGMENT_UPDATE_ALPHA\", this.CustomParts.Fragment_Custom_Alpha ? this.CustomParts.Fragment_Custom_Alpha : \"\")\r\n            .replace(\"#define CUSTOM_FRAGMENT_BEFORE_LIGHTS\", this.CustomParts.Fragment_Before_Lights ? this.CustomParts.Fragment_Before_Lights : \"\")\r\n            .replace(\r\n                \"#define CUSTOM_FRAGMENT_UPDATE_METALLICROUGHNESS\",\r\n                this.CustomParts.Fragment_Custom_MetallicRoughness ? this.CustomParts.Fragment_Custom_MetallicRoughness : \"\"\r\n            )\r\n            .replace(\"#define CUSTOM_FRAGMENT_UPDATE_MICROSURFACE\", this.CustomParts.Fragment_Custom_MicroSurface ? this.CustomParts.Fragment_Custom_MicroSurface : \"\")\r\n            .replace(\r\n                \"#define CUSTOM_FRAGMENT_BEFORE_FINALCOLORCOMPOSITION\",\r\n                this.CustomParts.Fragment_Before_FinalColorComposition ? this.CustomParts.Fragment_Before_FinalColorComposition : \"\"\r\n            )\r\n            .replace(\"#define CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\", this.CustomParts.Fragment_Before_FragColor ? this.CustomParts.Fragment_Before_FragColor : \"\")\r\n            .replace(\"#define CUSTOM_FRAGMENT_MAIN_END\", this.CustomParts.Fragment_MainEnd ? this.CustomParts.Fragment_MainEnd : \"\");\r\n\r\n        if (this.CustomParts.Fragment_Before_Fog) {\r\n            Effect.ShadersStore[name + \"PixelShader\"] = Effect.ShadersStore[name + \"PixelShader\"].replace(\r\n                \"#define CUSTOM_FRAGMENT_BEFORE_FOG\",\r\n                this.CustomParts.Fragment_Before_Fog\r\n            );\r\n        }\r\n\r\n        this._isCreatedShader = true;\r\n        this._createdShaderName = name;\r\n\r\n        return name;\r\n    }\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.CustomParts = new ShaderAlebdoParts();\r\n        this.customShaderNameResolve = this.Builder;\r\n\r\n        this.FragmentShader = Effect.ShadersStore[\"pbrPixelShader\"];\r\n        this.VertexShader = Effect.ShadersStore[\"pbrVertexShader\"];\r\n\r\n        this.FragmentShader = this.FragmentShader.replace(/#include<pbrBlockAlbedoOpacity>/g, Effect.IncludesShadersStore[\"pbrBlockAlbedoOpacity\"]);\r\n        this.FragmentShader = this.FragmentShader.replace(/#include<pbrBlockReflectivity>/g, Effect.IncludesShadersStore[\"pbrBlockReflectivity\"]);\r\n        this.FragmentShader = this.FragmentShader.replace(/#include<pbrBlockFinalColorComposition>/g, Effect.IncludesShadersStore[\"pbrBlockFinalColorComposition\"]);\r\n    }\r\n\r\n    public AddUniform(name: string, kind: string, param: any): PBRCustomMaterial {\r\n        if (!this._customUniform) {\r\n            this._customUniform = new Array();\r\n            this._newUniforms = new Array();\r\n            this._newSamplerInstances = {};\r\n            this._newUniformInstances = {};\r\n        }\r\n        if (param) {\r\n            if (kind.indexOf(\"sampler\") != -1) {\r\n                (<any>this._newSamplerInstances)[kind + \"-\" + name] = param;\r\n            } else {\r\n                (<any>this._newUniformInstances)[kind + \"-\" + name] = param;\r\n            }\r\n        }\r\n        this._customUniform.push(\"uniform \" + kind + \" \" + name + \";\");\r\n        this._newUniforms.push(name);\r\n\r\n        return this;\r\n    }\r\n\r\n    public AddAttribute(name: string): PBRCustomMaterial {\r\n        if (!this._customAttributes) {\r\n            this._customAttributes = [];\r\n        }\r\n\r\n        this._customAttributes.push(name);\r\n\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Begin(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Fragment_Begin = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Definitions(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Fragment_Definitions = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Fragment_MainBegin(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Fragment_MainBegin = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Custom_Albedo(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Fragment_Custom_Albedo = shaderPart.replace(\"result\", \"surfaceAlbedo\");\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Custom_Alpha(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Fragment_Custom_Alpha = shaderPart.replace(\"result\", \"alpha\");\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Before_Lights(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Fragment_Before_Lights = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Custom_MetallicRoughness(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Fragment_Custom_MetallicRoughness = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Custom_MicroSurface(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Fragment_Custom_MicroSurface = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Before_Fog(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Fragment_Before_Fog = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Before_FinalColorComposition(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Fragment_Before_FinalColorComposition = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Fragment_Before_FragColor(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Fragment_Before_FragColor = shaderPart.replace(\"result\", \"color\");\r\n        return this;\r\n    }\r\n\r\n    public Fragment_MainEnd(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Fragment_MainEnd = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Vertex_Begin(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Vertex_Begin = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Vertex_Definitions(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Vertex_Definitions = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Vertex_MainBegin(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Vertex_MainBegin = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Vertex_Before_PositionUpdated(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Vertex_Before_PositionUpdated = shaderPart.replace(\"result\", \"positionUpdated\");\r\n        return this;\r\n    }\r\n\r\n    public Vertex_Before_NormalUpdated(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Vertex_Before_NormalUpdated = shaderPart.replace(\"result\", \"normalUpdated\");\r\n        return this;\r\n    }\r\n\r\n    public Vertex_After_WorldPosComputed(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Vertex_After_WorldPosComputed = shaderPart;\r\n        return this;\r\n    }\r\n\r\n    public Vertex_MainEnd(shaderPart: string): PBRCustomMaterial {\r\n        this.CustomParts.Vertex_MainEnd = shaderPart;\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.PBRCustomMaterial\", PBRCustomMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"core/Shaders/ShadersInclude/depthPrePass\";\nimport \"core/Shaders/ShadersInclude/fogFragment\";\nimport \"core/Shaders/ShadersInclude/imageProcessingCompatibility\";\n\nconst name = \"firePixelShader\";\nconst shader = `precision highp float;uniform vec4 vEyePosition;varying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;uniform sampler2D diffuseSampler;uniform vec2 vDiffuseInfos;\n#endif\nuniform sampler2D distortionSampler;uniform sampler2D opacitySampler;\n#ifdef DIFFUSE\nvarying vec2 vDistortionCoords1;varying vec2 vDistortionCoords2;varying vec2 vDistortionCoords3;\n#endif\n#include<clipPlaneFragmentDeclaration>\n#include<fogFragmentDeclaration>\nvec4 bx2(vec4 x)\n{return vec4(2.0)*x-vec4(1.0);}\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);vec4 baseColor=vec4(1.,1.,1.,1.);float alpha=1.0;\n#ifdef DIFFUSE\nconst float distortionAmount0 =0.092;const float distortionAmount1 =0.092;const float distortionAmount2 =0.092;vec2 heightAttenuation=vec2(0.3,0.39);vec4 noise0=texture2D(distortionSampler,vDistortionCoords1);vec4 noise1=texture2D(distortionSampler,vDistortionCoords2);vec4 noise2=texture2D(distortionSampler,vDistortionCoords3);vec4 noiseSum=bx2(noise0)*distortionAmount0+bx2(noise1)*distortionAmount1+bx2(noise2)*distortionAmount2;vec4 perturbedBaseCoords=vec4(vDiffuseUV,0.0,1.0)+noiseSum*(vDiffuseUV.y*heightAttenuation.x+heightAttenuation.y);vec4 opacityColor=texture2D(opacitySampler,perturbedBaseCoords.xy);\n#ifdef ALPHATEST\nif (opacityColor.r<0.1)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor=texture2D(diffuseSampler,perturbedBaseCoords.xy)*2.0;baseColor*=opacityColor;baseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\nvec3 diffuseBase=vec3(1.0,1.0,1.0);\n#if defined(VERTEXALPHA) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nalpha*=vColor.a;\n#endif\nvec4 color=vec4(baseColor.rgb,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n#include<imageProcessingCompatibility>\n#define CUSTOM_FRAGMENT_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const firePixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesVertex\";\nimport \"core/Shaders/ShadersInclude/bonesVertex\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimation\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"core/Shaders/ShadersInclude/fogVertex\";\nimport \"core/Shaders/ShadersInclude/vertexColorMixing\";\n\nconst name = \"fireVertexShader\";\nconst shader = `precision highp float;attribute vec3 position;\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<instancesDeclaration>\nuniform mat4 view;uniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\nuniform float time;uniform float speed;\n#ifdef DIFFUSE\nvarying vec2 vDistortionCoords1;varying vec2 vDistortionCoords2;varying vec2 vDistortionCoords3;\n#endif\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_VERTEX_MAIN_BEGIN\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(position,1.0);gl_Position=viewProjection*worldPos;vPositionW=vec3(worldPos);\n#ifdef DIFFUSE\nvDiffuseUV=uv;vDiffuseUV.y-=0.2;\n#endif\n#include<clipPlaneVertex>\n#include<fogVertex>\n#include<vertexColorMixing>\n#if defined(POINTSIZE) && !defined(WEBGPU)\ngl_PointSize=pointSize;\n#endif\n#ifdef DIFFUSE\nvec3 layerSpeed=vec3(-0.2,-0.52,-0.1)*speed;vDistortionCoords1.x=uv.x;vDistortionCoords1.y=uv.y+layerSpeed.x*time/1000.0;vDistortionCoords2.x=uv.x;vDistortionCoords2.y=uv.y+layerSpeed.y*time/1000.0;vDistortionCoords3.x=uv.x;vDistortionCoords3.y=uv.y+layerSpeed.z*time/1000.0;\n#endif\n#define CUSTOM_VERTEX_MAIN_END\n}\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fireVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Tags } from \"core/Misc/tags\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\n\r\nimport \"./fire.fragment\";\r\nimport \"./fire.vertex\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\r\n\r\nclass FireMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public UV1 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public BonesPerMesh = 0;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class FireMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: Nullable<BaseTexture>;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"distortionTexture\")\r\n    private _distortionTexture: Nullable<BaseTexture>;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public distortionTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"opacityTexture\")\r\n    private _opacityTexture: Nullable<BaseTexture>;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public opacityTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize()\r\n    public speed = 1.0;\r\n\r\n    private _scaledDiffuse = new Color3();\r\n    private _lastTime: number = 0;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FireMaterialDefines();\r\n        }\r\n\r\n        const defines = <FireMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                if (!this._diffuseTexture.isReady()) {\r\n                    return false;\r\n                } else {\r\n                    defines._needUVs = true;\r\n                    defines.DIFFUSE = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        defines.ALPHATEST = this._opacityTexture ? true : false;\r\n\r\n        // Misc.\r\n        if (defines._areMiscDirty) {\r\n            defines.POINTSIZE = this.pointsCloud || scene.forcePointsCloud;\r\n            defines.FOG = scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE && this.fogEnabled;\r\n        }\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"fire\";\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"diffuseMatrix\",\r\n                // Fire\r\n                \"time\",\r\n                \"speed\",\r\n            ];\r\n            addClipPlaneUniforms(uniforms);\r\n\r\n            const join = defines.toString();\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    {\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: [],\r\n                        samplers: [\r\n                            \"diffuseSampler\",\r\n                            // Fire\r\n                            \"distortionSampler\",\r\n                            \"opacitySampler\",\r\n                        ],\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: null,\r\n                        maxSimultaneousLights: 4,\r\n                        transformFeedbackVaryings: null,\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <FireMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n\r\n                this._activeEffect.setTexture(\"distortionSampler\", this._distortionTexture);\r\n                this._activeEffect.setTexture(\"opacitySampler\", this._opacityTexture);\r\n            }\r\n\r\n            // Clip plane\r\n            bindClipPlane(this._activeEffect, this, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            scene.bindEyePosition(effect);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this._scaledDiffuse, this.alpha * mesh.visibility);\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        // Time\r\n        this._lastTime += scene.getEngine().getDeltaTime();\r\n        this._activeEffect.setFloat(\"time\", this._lastTime);\r\n\r\n        // Speed\r\n        this._activeEffect.setFloat(\"speed\", this.speed);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = [];\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n        if (this._distortionTexture && this._distortionTexture.animations && this._distortionTexture.animations.length > 0) {\r\n            results.push(this._distortionTexture);\r\n        }\r\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\r\n            results.push(this._opacityTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._distortionTexture) {\r\n            activeTextures.push(this._distortionTexture);\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            activeTextures.push(this._opacityTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._distortionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._opacityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FireMaterial\";\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._diffuseTexture) {\r\n            this._diffuseTexture.dispose();\r\n        }\r\n        if (this._distortionTexture) {\r\n            this._distortionTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FireMaterial {\r\n        return SerializationHelper.Clone<FireMaterial>(() => new FireMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FireMaterial\";\r\n        serializationObject.diffuseColor = this.diffuseColor.asArray();\r\n        serializationObject.speed = this.speed;\r\n\r\n        if (this._diffuseTexture) {\r\n            serializationObject._diffuseTexture = this._diffuseTexture.serialize();\r\n        }\r\n\r\n        if (this._distortionTexture) {\r\n            serializationObject._distortionTexture = this._distortionTexture.serialize();\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            serializationObject._opacityTexture = this._opacityTexture.serialize();\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FireMaterial {\r\n        const material = new FireMaterial(source.name, scene);\r\n\r\n        material.diffuseColor = Color3.FromArray(source.diffuseColor);\r\n        material.speed = source.speed;\r\n\r\n        material.alpha = source.alpha;\r\n\r\n        material.id = source.id;\r\n\r\n        Tags.AddTagsTo(material, source.tags);\r\n        material.backFaceCulling = source.backFaceCulling;\r\n        material.wireframe = source.wireframe;\r\n\r\n        if (source._diffuseTexture) {\r\n            material._diffuseTexture = Texture.Parse(source._diffuseTexture, scene, rootUrl);\r\n        }\r\n\r\n        if (source._distortionTexture) {\r\n            material._distortionTexture = Texture.Parse(source._distortionTexture, scene, rootUrl);\r\n        }\r\n\r\n        if (source._opacityTexture) {\r\n            material._opacityTexture = Texture.Parse(source._opacityTexture, scene, rootUrl);\r\n        }\r\n\r\n        return material;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.FireMaterial\", FireMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/helperFunctions\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"core/Shaders/ShadersInclude/depthPrePass\";\nimport \"core/Shaders/ShadersInclude/lightFragment\";\nimport \"core/Shaders/ShadersInclude/fogFragment\";\nimport \"core/Shaders/ShadersInclude/imageProcessingCompatibility\";\n\nconst name = \"furPixelShader\";\nconst shader = `precision highp float;uniform vec4 vEyePosition;uniform vec4 vDiffuseColor;uniform vec4 furColor;uniform float furLength;varying vec3 vPositionW;varying float vfur_length;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<helperFunctions>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;uniform sampler2D diffuseSampler;uniform vec2 vDiffuseInfos;\n#endif\n#ifdef HIGHLEVEL\nuniform float furOffset;uniform float furOcclusion;uniform sampler2D furTexture;varying vec2 vFurUV;\n#endif\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<fogFragmentDeclaration>\n#include<clipPlaneFragmentDeclaration>\nfloat Rand(vec3 rv) {float x=dot(rv,vec3(12.9898,78.233,24.65487));return fract(sin(x)*43758.5453);}\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);vec4 baseColor=furColor;vec3 diffuseColor=vDiffuseColor.rgb;float alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nbaseColor*=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n#ifdef HIGHLEVEL\nvec4 furTextureColor=texture2D(furTexture,vec2(vFurUV.x,vFurUV.y));if (furTextureColor.a<=0.0 || furTextureColor.g<furOffset) {discard;}\nfloat occlusion=mix(0.0,furTextureColor.b*1.2,furOffset);baseColor=vec4(baseColor.xyz*max(occlusion,furOcclusion),1.1-furOffset);\n#endif\nvec3 diffuseBase=vec3(0.,0.,0.);lightingInfo info;float shadow=1.;float glossiness=0.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#if defined(VERTEXALPHA) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase.rgb*baseColor.rgb,0.0,1.0);\n#ifdef HIGHLEVEL\nvec4 color=vec4(finalDiffuse,alpha);\n#else\nfloat r=vfur_length/furLength*0.5;vec4 color=vec4(finalDiffuse*(0.5+r),alpha);\n#endif\n#include<fogFragment>\ngl_FragColor=color;\n#include<imageProcessingCompatibility>\n#define CUSTOM_FRAGMENT_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const furPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesVertex\";\nimport \"core/Shaders/ShadersInclude/bonesVertex\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimation\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"core/Shaders/ShadersInclude/fogVertex\";\nimport \"core/Shaders/ShadersInclude/shadowsVertex\";\nimport \"core/Shaders/ShadersInclude/vertexColorMixing\";\n\nconst name = \"furVertexShader\";\nconst shader = `precision highp float;attribute vec3 position;attribute vec3 normal;\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\nuniform float furLength;uniform float furAngle;\n#ifdef HIGHLEVEL\nuniform float furOffset;uniform vec3 furGravity;uniform float furTime;uniform float furSpacing;uniform float furDensity;\n#endif\n#ifdef HEIGHTMAP\nuniform sampler2D heightTexture;\n#endif\n#ifdef HIGHLEVEL\nvarying vec2 vFurUV;\n#endif\n#include<instancesDeclaration>\nuniform mat4 view;uniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;uniform mat4 diffuseMatrix;uniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\nvarying float vfur_length;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nfloat Rand(vec3 rv) {float x=dot(rv,vec3(12.9898,78.233,24.65487));return fract(sin(x)*43758.5453);}\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_VERTEX_MAIN_BEGIN\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nfloat r=Rand(position);\n#ifdef HEIGHTMAP\n#if __VERSION__>100\nvfur_length=furLength*texture(heightTexture,uv).x;\n#else\nvfur_length=furLength*texture2D(heightTexture,uv).r;\n#endif\n#else \nvfur_length=(furLength*r);\n#endif\nvec3 tangent1=vec3(normal.y,-normal.x,0);vec3 tangent2=vec3(-normal.z,0,normal.x);r=Rand(tangent1*r);float J=(2.0+4.0*r);r=Rand(tangent2*r);float K=(2.0+2.0*r);tangent1=tangent1*J+tangent2*K;tangent1=normalize(tangent1);vec3 newPosition=position+normal*vfur_length*cos(furAngle)+tangent1*vfur_length*sin(furAngle);\n#ifdef HIGHLEVEL\nvec3 forceDirection=vec3(0.0,0.0,0.0);forceDirection.x=sin(furTime+position.x*0.05)*0.2;forceDirection.y=cos(furTime*0.7+position.y*0.04)*0.2;forceDirection.z=sin(furTime*0.7+position.z*0.04)*0.2;vec3 displacement=vec3(0.0,0.0,0.0);displacement=furGravity+forceDirection;float displacementFactor=pow(furOffset,3.0);vec3 aNormal=normal;aNormal.xyz+=displacement*displacementFactor;newPosition=vec3(newPosition.x,newPosition.y,newPosition.z)+(normalize(aNormal)*furOffset*furSpacing);\n#endif\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\ngl_Position=viewProjection*finalWorld*vec4(newPosition,1.0);vec4 worldPos=finalWorld*vec4(newPosition,1.0);vPositionW=vec3(worldPos);\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x==0.)\n{vDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));}\nelse\n{vDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));}\n#ifdef HIGHLEVEL\nvFurUV=vDiffuseUV*furDensity;\n#endif\n#else\n#ifdef HIGHLEVEL\nvFurUV=uv*furDensity;\n#endif\n#endif\n#include<clipPlaneVertex>\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n#include<vertexColorMixing>\n#if defined(POINTSIZE) && !defined(WEBGPU)\ngl_PointSize=pointSize;\n#endif\n#define CUSTOM_VERTEX_MAIN_END\n}\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const furVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsVector3, serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport { Tags } from \"core/Misc/tags\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"core/Materials/Textures/dynamicTexture\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\n\r\nimport \"./fur.fragment\";\r\nimport \"./fur.vertex\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\r\n\r\nclass FurMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public HEIGHTMAP = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n    public HIGHLEVEL = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class FurMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsTexture(\"heightTexture\")\r\n    private _heightTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public heightTexture: BaseTexture;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize()\r\n    public furLength: number = 1;\r\n\r\n    @serialize()\r\n    public furAngle: number = 0;\r\n\r\n    @serializeAsColor3()\r\n    public furColor = new Color3(0.44, 0.21, 0.02);\r\n\r\n    @serialize()\r\n    public furOffset: number = 0.0;\r\n\r\n    @serialize()\r\n    public furSpacing: number = 12;\r\n\r\n    @serializeAsVector3()\r\n    public furGravity = new Vector3(0, 0, 0);\r\n\r\n    @serialize()\r\n    public furSpeed: number = 100;\r\n\r\n    @serialize()\r\n    public furDensity: number = 20;\r\n\r\n    @serialize()\r\n    public furOcclusion: number = 0.0;\r\n\r\n    public furTexture: DynamicTexture;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    @serialize()\r\n    public highLevelFur: boolean = true;\r\n\r\n    public _meshes: AbstractMesh[];\r\n\r\n    private _furTime: number = 0;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    @serialize()\r\n    public get furTime() {\r\n        return this._furTime;\r\n    }\r\n\r\n    public set furTime(furTime: number) {\r\n        this._furTime = furTime;\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public updateFur(): void {\r\n        for (let i = 1; i < this._meshes.length; i++) {\r\n            const offsetFur = <FurMaterial>this._meshes[i].material;\r\n\r\n            offsetFur.furLength = this.furLength;\r\n            offsetFur.furAngle = this.furAngle;\r\n            offsetFur.furGravity = this.furGravity;\r\n            offsetFur.furSpacing = this.furSpacing;\r\n            offsetFur.furSpeed = this.furSpeed;\r\n            offsetFur.furColor = this.furColor;\r\n            offsetFur.diffuseTexture = this.diffuseTexture;\r\n            offsetFur.furTexture = this.furTexture;\r\n            offsetFur.highLevelFur = this.highLevelFur;\r\n            offsetFur.furTime = this.furTime;\r\n            offsetFur.furDensity = this.furDensity;\r\n        }\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FurMaterialDefines();\r\n        }\r\n\r\n        const defines = <FurMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this.diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (!this.diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n                if (this.heightTexture && engine.getCaps().maxVertexTextureImageUnits) {\r\n                    if (!this.heightTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.HEIGHTMAP = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // High level\r\n        if (this.highLevelFur !== defines.HIGHLEVEL) {\r\n            defines.HIGHLEVEL = true;\r\n            defines.markAsUnprocessed();\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"fur\";\r\n            const join = defines.toString();\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vLightsType\",\r\n                \"vDiffuseColor\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"diffuseMatrix\",\r\n                \"furLength\",\r\n                \"furAngle\",\r\n                \"furColor\",\r\n                \"furOffset\",\r\n                \"furGravity\",\r\n                \"furTime\",\r\n                \"furSpacing\",\r\n                \"furDensity\",\r\n                \"furOcclusion\",\r\n            ];\r\n            addClipPlaneUniforms(uniforms);\r\n            const samplers = [\"diffuseSampler\", \"heightTexture\", \"furTexture\"];\r\n\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <FurMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (scene.getCachedMaterial() !== this) {\r\n            // Textures\r\n            if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n            }\r\n\r\n            if (this._heightTexture) {\r\n                this._activeEffect.setTexture(\"heightTexture\", this._heightTexture);\r\n            }\r\n\r\n            // Clip plane\r\n            bindClipPlane(this._activeEffect, this, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            scene.bindEyePosition(effect);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._activeEffect.setFloat(\"furLength\", this.furLength);\r\n        this._activeEffect.setFloat(\"furAngle\", this.furAngle);\r\n        this._activeEffect.setColor4(\"furColor\", this.furColor, 1.0);\r\n\r\n        if (this.highLevelFur) {\r\n            this._activeEffect.setVector3(\"furGravity\", this.furGravity);\r\n            this._activeEffect.setFloat(\"furOffset\", this.furOffset);\r\n            this._activeEffect.setFloat(\"furSpacing\", this.furSpacing);\r\n            this._activeEffect.setFloat(\"furDensity\", this.furDensity);\r\n            this._activeEffect.setFloat(\"furOcclusion\", this.furOcclusion);\r\n\r\n            this._furTime += this.getScene().getEngine().getDeltaTime() / this.furSpeed;\r\n            this._activeEffect.setFloat(\"furTime\", this._furTime);\r\n\r\n            this._activeEffect.setTexture(\"furTexture\", this.furTexture);\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = [];\r\n\r\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\r\n            results.push(this.diffuseTexture);\r\n        }\r\n\r\n        if (this.heightTexture && this.heightTexture.animations && this.heightTexture.animations.length > 0) {\r\n            results.push(this.heightTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._heightTexture) {\r\n            activeTextures.push(this._heightTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this.diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._heightTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.diffuseTexture) {\r\n            this.diffuseTexture.dispose();\r\n        }\r\n\r\n        if (this._meshes) {\r\n            for (let i = 1; i < this._meshes.length; i++) {\r\n                const mat = this._meshes[i].material;\r\n\r\n                if (mat) {\r\n                    mat.dispose(forceDisposeEffect);\r\n                }\r\n                this._meshes[i].dispose();\r\n            }\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FurMaterial {\r\n        return SerializationHelper.Clone(() => new FurMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FurMaterial\";\r\n\r\n        if (this._meshes) {\r\n            serializationObject.sourceMeshName = this._meshes[0].name;\r\n            serializationObject.quality = this._meshes.length;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FurMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FurMaterial {\r\n        const material = SerializationHelper.Parse(() => new FurMaterial(source.name, scene), source, scene, rootUrl);\r\n\r\n        if (source.sourceMeshName && material.highLevelFur) {\r\n            scene.executeWhenReady(() => {\r\n                const sourceMesh = <Mesh>scene.getMeshByName(source.sourceMeshName);\r\n                if (sourceMesh) {\r\n                    const furTexture = FurMaterial.GenerateTexture(\"Fur Texture\", scene);\r\n                    material.furTexture = furTexture;\r\n                    FurMaterial.FurifyMesh(sourceMesh, source.quality);\r\n                }\r\n            });\r\n        }\r\n\r\n        return material;\r\n    }\r\n\r\n    public static GenerateTexture(name: string, scene: Scene): DynamicTexture {\r\n        // Generate fur textures\r\n        const texture = new DynamicTexture(\"FurTexture \" + name, 256, scene, true);\r\n        const context = texture.getContext();\r\n\r\n        for (let i = 0; i < 20000; ++i) {\r\n            context.fillStyle = \"rgba(255, \" + Math.floor(Math.random() * 255) + \", \" + Math.floor(Math.random() * 255) + \", 1)\";\r\n            context.fillRect(Math.random() * texture.getSize().width, Math.random() * texture.getSize().height, 2, 2);\r\n        }\r\n\r\n        texture.update(false);\r\n        texture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n        texture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n\r\n        return texture;\r\n    }\r\n\r\n    // Creates and returns an array of meshes used as shells for the Fur Material\r\n    // that can be disposed later in your code\r\n    // The quality is in interval [0, 100]\r\n    public static FurifyMesh(sourceMesh: Mesh, quality: number): Mesh[] {\r\n        const meshes = [sourceMesh];\r\n        const mat: FurMaterial = <FurMaterial>sourceMesh.material;\r\n        let i;\r\n\r\n        if (!(mat instanceof FurMaterial)) {\r\n            throw \"The material of the source mesh must be a Fur Material\";\r\n        }\r\n\r\n        for (i = 1; i < quality; i++) {\r\n            const offsetFur = new FurMaterial(mat.name + i, sourceMesh.getScene());\r\n            sourceMesh.getScene().materials.pop();\r\n            Tags.EnableFor(offsetFur);\r\n            Tags.AddTagsTo(offsetFur, \"furShellMaterial\");\r\n\r\n            offsetFur.furLength = mat.furLength;\r\n            offsetFur.furAngle = mat.furAngle;\r\n            offsetFur.furGravity = mat.furGravity;\r\n            offsetFur.furSpacing = mat.furSpacing;\r\n            offsetFur.furSpeed = mat.furSpeed;\r\n            offsetFur.furColor = mat.furColor;\r\n            offsetFur.diffuseTexture = mat.diffuseTexture;\r\n            offsetFur.furOffset = i / quality;\r\n            offsetFur.furTexture = mat.furTexture;\r\n            offsetFur.highLevelFur = mat.highLevelFur;\r\n            offsetFur.furTime = mat.furTime;\r\n            offsetFur.furDensity = mat.furDensity;\r\n\r\n            const offsetMesh = sourceMesh.clone(sourceMesh.name + i) as Mesh;\r\n\r\n            offsetMesh.material = offsetFur;\r\n            offsetMesh.skeleton = sourceMesh.skeleton;\r\n            offsetMesh.position = Vector3.Zero();\r\n            meshes.push(offsetMesh);\r\n        }\r\n\r\n        for (i = 1; i < meshes.length; i++) {\r\n            meshes[i].parent = sourceMesh;\r\n        }\r\n\r\n        (<FurMaterial>sourceMesh.material)._meshes = meshes;\r\n\r\n        return meshes;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.FurMaterial\", FurMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/helperFunctions\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"core/Shaders/ShadersInclude/depthPrePass\";\nimport \"core/Shaders/ShadersInclude/lightFragment\";\nimport \"core/Shaders/ShadersInclude/fogFragment\";\nimport \"core/Shaders/ShadersInclude/imageProcessingCompatibility\";\n\nconst name = \"gradientPixelShader\";\nconst shader = `precision highp float;\runiform vec4 vEyePosition;\runiform vec4 topColor;\runiform vec4 bottomColor;\runiform float offset;\runiform float scale;\runiform float smoothness;\rvarying vec3 vPositionW;\rvarying vec3 vPosition;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\r#endif\n#include<helperFunctions>\n#include<__decl__lightFragment>[0]\n#include<__decl__lightFragment>[1]\n#include<__decl__lightFragment>[2]\n#include<__decl__lightFragment>[3]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n#include<fogFragmentDeclaration>\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);\rfloat h=vPosition.y*scale+offset;\rfloat mysmoothness=clamp(smoothness,0.01,max(smoothness,10.));\rvec4 baseColor=mix(bottomColor,topColor,max(pow(max(h,0.0),mysmoothness),0.0));\rvec3 diffuseColor=baseColor.rgb;\rfloat alpha=baseColor.a;\r#ifdef ALPHATEST\nif (baseColor.a<0.4)\rdiscard;\r#endif\n#include<depthPrePass>\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\r#endif\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\r#else\nvec3 normalW=vec3(1.0,1.0,1.0);\r#endif\n#ifdef EMISSIVE\nvec3 diffuseBase=baseColor.rgb;\r#else\nvec3 diffuseBase=vec3(0.,0.,0.);\r#endif\nlightingInfo info;\rfloat shadow=1.;\rfloat glossiness=0.;\r#include<lightFragment>[0..maxSimultaneousLights]\n#if defined(VERTEXALPHA) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nalpha*=vColor.a;\r#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\rvec4 color=vec4(finalDiffuse,alpha);\r#include<fogFragment>\ngl_FragColor=color;\r#include<imageProcessingCompatibility>\n#define CUSTOM_FRAGMENT_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const gradientPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesVertex\";\nimport \"core/Shaders/ShadersInclude/bonesVertex\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimation\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"core/Shaders/ShadersInclude/fogVertex\";\nimport \"core/Shaders/ShadersInclude/shadowsVertex\";\nimport \"core/Shaders/ShadersInclude/vertexColorMixing\";\n\nconst name = \"gradientVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\r#ifdef NORMAL\nattribute vec3 normal;\r#endif\n#ifdef UV1\nattribute vec2 uv;\r#endif\n#ifdef UV2\nattribute vec2 uv2;\r#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\r#endif\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<instancesDeclaration>\nuniform mat4 view;\runiform mat4 viewProjection;\r#ifdef POINTSIZE\nuniform float pointSize;\r#endif\nvarying vec3 vPositionW;\rvarying vec3 vPosition;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\r#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_VERTEX_MAIN_BEGIN\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(position,1.0);\rgl_Position=viewProjection*worldPos;\rvPositionW=vec3(worldPos);\rvPosition=position;\r#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\r#endif\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\r#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\r#endif\n#include<clipPlaneVertex>\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n#include<vertexColorMixing>\n#if defined(POINTSIZE) && !defined(WEBGPU)\ngl_PointSize=pointSize;\r#endif\n#define CUSTOM_VERTEX_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const gradientVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\nimport \"./gradient.fragment\";\r\nimport \"./gradient.vertex\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\r\n\r\nclass GradientMaterialDefines extends MaterialDefines {\r\n    public EMISSIVE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class GradientMaterial extends PushMaterial {\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    // The gradient top color, red by default\r\n    @serializeAsColor3()\r\n    public topColor = new Color3(1, 0, 0);\r\n\r\n    @serialize()\r\n    public topColorAlpha = 1.0;\r\n\r\n    // The gradient top color, blue by default\r\n    @serializeAsColor3()\r\n    public bottomColor = new Color3(0, 0, 1);\r\n\r\n    @serialize()\r\n    public bottomColorAlpha = 1.0;\r\n\r\n    // Gradient offset\r\n    @serialize()\r\n    public offset = 0;\r\n\r\n    @serialize()\r\n    public scale = 1.0;\r\n\r\n    @serialize()\r\n    public smoothness = 1.0;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0 || this.topColorAlpha < 1.0 || this.bottomColorAlpha < 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new GradientMaterialDefines();\r\n        }\r\n\r\n        const defines = <GradientMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        defines.EMISSIVE = this._disableLighting;\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"gradient\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vLightsType\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"mBones\",\r\n                \"topColor\",\r\n                \"bottomColor\",\r\n                \"offset\",\r\n                \"smoothness\",\r\n                \"scale\",\r\n            ];\r\n            addClipPlaneUniforms(uniforms);\r\n            const samplers: string[] = [];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <GradientMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, effect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Clip plane\r\n            bindClipPlane(effect, this, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            scene.bindEyePosition(effect);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._activeEffect.setColor4(\"topColor\", this.topColor, this.topColorAlpha);\r\n        this._activeEffect.setColor4(\"bottomColor\", this.bottomColor, this.bottomColorAlpha);\r\n        this._activeEffect.setFloat(\"offset\", this.offset);\r\n        this._activeEffect.setFloat(\"scale\", this.scale);\r\n        this._activeEffect.setFloat(\"smoothness\", this.smoothness);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): GradientMaterial {\r\n        return SerializationHelper.Clone(() => new GradientMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.GradientMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"GradientMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): GradientMaterial {\r\n        return SerializationHelper.Parse(() => new GradientMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GradientMaterial\", GradientMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogFragment\";\nimport \"core/Shaders/ShadersInclude/imageProcessingCompatibility\";\n\nconst name = \"gridPixelShader\";\nconst shader = `#extension GL_OES_standard_derivatives : enable\n#define SQRT2 1.41421356\n#define PI 3.14159\nprecision highp float;\runiform float visibility;\runiform vec3 mainColor;\runiform vec3 lineColor;\runiform vec4 gridControl;\runiform vec3 gridOffset;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\r#include<fogFragmentDeclaration>\n#ifdef OPACITY\nvarying vec2 vOpacityUV;\runiform sampler2D opacitySampler;\runiform vec2 vOpacityInfos;\r#endif\nfloat getDynamicVisibility(float position) {\rfloat majorGridFrequency=gridControl.y;\rif (floor(position+0.5)==floor(position/majorGridFrequency+0.5)*majorGridFrequency)\r{\rreturn 1.0;\r} \rreturn gridControl.z;\r}\rfloat getAnisotropicAttenuation(float differentialLength) {\rconst float maxNumberOfLines=10.0;\rreturn clamp(1.0/(differentialLength+1.0)-1.0/maxNumberOfLines,0.0,1.0);\r}\rfloat isPointOnLine(float position,float differentialLength) {\rfloat fractionPartOfPosition=position-floor(position+0.5); \rfractionPartOfPosition/=differentialLength; \rfractionPartOfPosition=clamp(fractionPartOfPosition,-1.,1.);\rfloat result=0.5+0.5*cos(fractionPartOfPosition*PI); \rreturn result; \r}\rfloat contributionOnAxis(float position) {\rfloat differentialLength=length(vec2(dFdx(position),dFdy(position)));\rdifferentialLength*=SQRT2; \rfloat result=isPointOnLine(position,differentialLength);\rfloat dynamicVisibility=getDynamicVisibility(position);\rresult*=dynamicVisibility;\rfloat anisotropicAttenuation=getAnisotropicAttenuation(differentialLength);\rresult*=anisotropicAttenuation;\rreturn result;\r}\rfloat normalImpactOnAxis(float x) {\rfloat normalImpact=clamp(1.0-3.0*abs(x*x*x),0.0,1.0);\rreturn normalImpact;\r}\r#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\nfloat gridRatio=gridControl.x;\rvec3 gridPos=(vPosition+gridOffset.xyz)/gridRatio;\rfloat x=contributionOnAxis(gridPos.x);\rfloat y=contributionOnAxis(gridPos.y);\rfloat z=contributionOnAxis(gridPos.z);\rvec3 normal=normalize(vNormal);\rx*=normalImpactOnAxis(normal.x);\ry*=normalImpactOnAxis(normal.y);\rz*=normalImpactOnAxis(normal.z);\r#ifdef MAX_LINE \nfloat grid=clamp(max(max(x,y),z),0.,1.);\r#else\nfloat grid=clamp(x+y+z,0.,1.);\r#endif\nvec3 color=mix(mainColor,lineColor,grid);\r#ifdef FOG\n#include<fogFragment>\n#endif\nfloat opacity=1.0;\r#ifdef TRANSPARENT\nopacity=clamp(grid,0.08,gridControl.w*grid);\r#endif \n#ifdef OPACITY\nopacity*=texture2D(opacitySampler,vOpacityUV).a;\r#endif \ngl_FragColor=vec4(color.rgb,opacity*visibility);\r#ifdef TRANSPARENT\n#ifdef PREMULTIPLYALPHA\ngl_FragColor.rgb*=opacity;\r#endif\n#else \n#endif\n#include<imageProcessingCompatibility>\n#define CUSTOM_FRAGMENT_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const gridPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesVertex\";\nimport \"core/Shaders/ShadersInclude/fogVertex\";\n\nconst name = \"gridVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\rattribute vec3 normal;\r#ifdef UV1\nattribute vec2 uv;\r#endif\n#ifdef UV2\nattribute vec2 uv2;\r#endif\n#include<instancesDeclaration>\nuniform mat4 projection;\runiform mat4 view;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\r#include<fogVertexDeclaration>\n#ifdef OPACITY\nvarying vec2 vOpacityUV;\runiform mat4 opacityMatrix;\runiform vec2 vOpacityInfos;\r#endif\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_VERTEX_MAIN_BEGIN\n#include<instancesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\r#include<fogVertex>\nvec4 cameraSpacePosition=view*worldPos;\rgl_Position=projection*cameraSpacePosition;\r#ifdef OPACITY\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\r#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\r#endif\nif (vOpacityInfos.x==0.)\r{\rvOpacityUV=vec2(opacityMatrix*vec4(uv,1.0,0.0));\r}\relse\r{\rvOpacityUV=vec2(opacityMatrix*vec4(uv2,1.0,0.0));\r}\r#endif \nvPosition=position;\rvNormal=normal;\r#define CUSTOM_VERTEX_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const gridVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper, serializeAsVector3 } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector4, Vector3 } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\nimport \"./grid.fragment\";\r\nimport \"./grid.vertex\";\r\n\r\nclass GridMaterialDefines extends MaterialDefines {\r\n    public OPACITY = false;\r\n    public TRANSPARENT = false;\r\n    public FOG = false;\r\n    public PREMULTIPLYALPHA = false;\r\n    public MAX_LINE = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public INSTANCES = false;\r\n    public THIN_INSTANCES = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * The grid materials allows you to wrap any shape with a grid.\r\n * Colors are customizable.\r\n */\r\nexport class GridMaterial extends PushMaterial {\r\n    /**\r\n     * Main color of the grid (e.g. between lines)\r\n     */\r\n    @serializeAsColor3()\r\n    public mainColor = Color3.Black();\r\n\r\n    /**\r\n     * Color of the grid lines.\r\n     */\r\n    @serializeAsColor3()\r\n    public lineColor = Color3.Teal();\r\n\r\n    /**\r\n     * The scale of the grid compared to unit.\r\n     */\r\n    @serialize()\r\n    public gridRatio = 1.0;\r\n\r\n    /**\r\n     * Allows setting an offset for the grid lines.\r\n     */\r\n    @serializeAsVector3()\r\n    public gridOffset = Vector3.Zero();\r\n\r\n    /**\r\n     * The frequency of thicker lines.\r\n     */\r\n    @serialize()\r\n    public majorUnitFrequency = 10;\r\n\r\n    /**\r\n     * The visibility of minor units in the grid.\r\n     */\r\n    @serialize()\r\n    public minorUnitVisibility = 0.33;\r\n\r\n    /**\r\n     * The grid opacity outside of the lines.\r\n     */\r\n    @serialize()\r\n    public opacity = 1.0;\r\n\r\n    /**\r\n     * Determine RBG output is premultiplied by alpha value.\r\n     */\r\n    @serialize()\r\n    public preMultiplyAlpha = false;\r\n\r\n    /**\r\n     * Determines if the max line value will be used instead of the sum wherever grid lines intersect.\r\n     */\r\n    @serialize()\r\n    public useMaxLine = false;\r\n\r\n    @serializeAsTexture(\"opacityTexture\")\r\n    private _opacityTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public opacityTexture: BaseTexture;\r\n\r\n    private _gridControl: Vector4 = new Vector4(this.gridRatio, this.majorUnitFrequency, this.minorUnitVisibility, this.opacity);\r\n\r\n    /**\r\n     * constructor\r\n     * @param name The name given to the material in order to identify it afterwards.\r\n     * @param scene The scene the material is used in.\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the grid requires alpha blending.\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        return this.opacity < 1.0 || (this._opacityTexture && this._opacityTexture.isReady());\r\n    }\r\n\r\n    public needAlphaBlendingForMesh(mesh: AbstractMesh): boolean {\r\n        return mesh.visibility < 1.0 || this.needAlphaBlending();\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new GridMaterialDefines();\r\n        }\r\n\r\n        const defines = <GridMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        if (defines.TRANSPARENT !== this.opacity < 1.0) {\r\n            defines.TRANSPARENT = !defines.TRANSPARENT;\r\n            defines.markAsUnprocessed();\r\n        }\r\n\r\n        if (defines.PREMULTIPLYALPHA != this.preMultiplyAlpha) {\r\n            defines.PREMULTIPLYALPHA = !defines.PREMULTIPLYALPHA;\r\n            defines.markAsUnprocessed();\r\n        }\r\n\r\n        if (defines.MAX_LINE !== this.useMaxLine) {\r\n            defines.MAX_LINE = !defines.MAX_LINE;\r\n            defines.markAsUnprocessed();\r\n        }\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    if (!this._opacityTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.OPACITY = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, false, this.fogEnabled, false, defines);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, scene.getEngine(), this, defines, !!useInstances);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Attributes\r\n            MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n            const attribs = [VertexBuffer.PositionKind, VertexBuffer.NormalKind];\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Defines\r\n            const join = defines.toString();\r\n            subMesh.setEffect(\r\n                scene\r\n                    .getEngine()\r\n                    .createEffect(\r\n                        \"grid\",\r\n                        attribs,\r\n                        [\r\n                            \"projection\",\r\n                            \"mainColor\",\r\n                            \"lineColor\",\r\n                            \"gridControl\",\r\n                            \"gridOffset\",\r\n                            \"vFogInfos\",\r\n                            \"vFogColor\",\r\n                            \"world\",\r\n                            \"view\",\r\n                            \"opacityMatrix\",\r\n                            \"vOpacityInfos\",\r\n                            \"visibility\",\r\n                        ],\r\n                        [\"opacitySampler\"],\r\n                        join,\r\n                        undefined,\r\n                        this.onCompiled,\r\n                        this.onError\r\n                    ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <GridMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        this._activeEffect.setFloat(\"visibility\", mesh.visibility);\r\n\r\n        // Matrices\r\n        if (!defines.INSTANCES || defines.THIN_INSTANCE) {\r\n            this.bindOnlyWorldMatrix(world);\r\n        }\r\n        this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        this._activeEffect.setMatrix(\"projection\", scene.getProjectionMatrix());\r\n\r\n        // Uniforms\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor3(\"mainColor\", this.mainColor);\r\n            this._activeEffect.setColor3(\"lineColor\", this.lineColor);\r\n\r\n            this._activeEffect.setVector3(\"gridOffset\", this.gridOffset);\r\n\r\n            this._gridControl.x = this.gridRatio;\r\n            this._gridControl.y = Math.round(this.majorUnitFrequency);\r\n            this._gridControl.z = this.minorUnitVisibility;\r\n            this._gridControl.w = this.opacity;\r\n            this._activeEffect.setVector4(\"gridControl\", this._gridControl);\r\n\r\n            if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                this._activeEffect.setTexture(\"opacitySampler\", this._opacityTexture);\r\n                this._activeEffect.setFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\r\n                this._activeEffect.setMatrix(\"opacityMatrix\", this._opacityTexture.getTextureMatrix());\r\n            }\r\n        }\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Dispose the material and its associated resources.\r\n     * @param forceDisposeEffect will also dispose the used effect when true\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): GridMaterial {\r\n        return SerializationHelper.Clone(() => new GridMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.GridMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"GridMaterial\";\r\n    }\r\n\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): GridMaterial {\r\n        return SerializationHelper.Parse(() => new GridMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GridMaterial\", GridMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/helperFunctions\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"core/Shaders/ShadersInclude/depthPrePass\";\nimport \"core/Shaders/ShadersInclude/lightFragment\";\nimport \"core/Shaders/ShadersInclude/fogFragment\";\nimport \"core/Shaders/ShadersInclude/imageProcessingCompatibility\";\n\nconst name = \"lavaPixelShader\";\nconst shader = `precision highp float;uniform vec4 vEyePosition;uniform vec4 vDiffuseColor;varying vec3 vPositionW;uniform float time;uniform float speed;uniform float movingSpeed;uniform vec3 fogColor;uniform sampler2D noiseTexture;uniform float fogDensity;varying float noise;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<helperFunctions>\n#include<__decl__lightFragment>[0]\n#include<__decl__lightFragment>[1]\n#include<__decl__lightFragment>[2]\n#include<__decl__lightFragment>[3]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;uniform sampler2D diffuseSampler;uniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n#include<fogFragmentDeclaration>\nfloat random( vec3 scale,float seed ){return fract( sin( dot( gl_FragCoord.xyz+seed,scale ) )*43758.5453+seed ) ;}\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);vec4 baseColor=vec4(1.,1.,1.,1.);vec3 diffuseColor=vDiffuseColor.rgb;float alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nvec4 noiseTex=texture2D( noiseTexture,vDiffuseUV );vec2 T1=vDiffuseUV+vec2( 1.5,-1.5 )*time *0.02;vec2 T2=vDiffuseUV+vec2( -0.5,2.0 )*time*0.01*speed;T1.x+=noiseTex.x*2.0;T1.y+=noiseTex.y*2.0;T2.x-=noiseTex.y*0.2+time*0.001*movingSpeed;T2.y+=noiseTex.z*0.2+time*0.002*movingSpeed;float p=texture2D( noiseTexture,T1*3.0 ).a;vec4 lavaColor=texture2D( diffuseSampler,T2*4.0);vec4 temp=lavaColor*( vec4( p,p,p,p )*2. )+( lavaColor*lavaColor-0.1 );baseColor=temp;float depth=gl_FragCoord.z*4.0;const float LOG2=1.442695;float fogFactor=exp2(-fogDensity*fogDensity*depth*depth*LOG2 );fogFactor=1.0-clamp( fogFactor,0.0,1.0 );baseColor=mix( baseColor,vec4( fogColor,baseColor.w ),fogFactor );diffuseColor=baseColor.rgb;\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n#ifdef UNLIT\nvec3 diffuseBase=vec3(1.,1.,1.);\n#else\nvec3 diffuseBase=vec3(0.,0.,0.);lightingInfo info;float shadow=1.;float glossiness=0.;\n#include<lightFragment>[0]\n#include<lightFragment>[1]\n#include<lightFragment>[2]\n#include<lightFragment>[3]\n#endif\n#if defined(VERTEXALPHA) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;vec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n#include<imageProcessingCompatibility>\n#define CUSTOM_FRAGMENT_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const lavaPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesVertex\";\nimport \"core/Shaders/ShadersInclude/bonesVertex\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimation\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"core/Shaders/ShadersInclude/fogVertex\";\nimport \"core/Shaders/ShadersInclude/shadowsVertex\";\nimport \"core/Shaders/ShadersInclude/vertexColorMixing\";\n\nconst name = \"lavaVertexShader\";\nconst shader = `precision highp float;uniform float time;uniform float lowFrequencySpeed;varying float noise;attribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<instancesDeclaration>\nuniform mat4 view;uniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;uniform mat4 diffuseMatrix;uniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n/* NOISE FUNCTIONS */\nvec3 mod289(vec3 x)\n{return x-floor(x*(1.0/289.0))*289.0;}\nvec4 mod289(vec4 x)\n{return x-floor(x*(1.0/289.0))*289.0;}\nvec4 permute(vec4 x)\n{return mod289(((x*34.0)+1.0)*x);}\nvec4 taylorInvSqrt(vec4 r)\n{return 1.79284291400159-0.85373472095314*r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\nfloat pnoise(vec3 P,vec3 rep)\n{vec3 Pi0=mod(floor(P),rep); \nvec3 Pi1=mod(Pi0+vec3(1.0),rep); \nPi0=mod289(Pi0);Pi1=mod289(Pi1);vec3 Pf0=fract(P); \nvec3 Pf1=Pf0-vec3(1.0); \nvec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);vec4 iy=vec4(Pi0.yy,Pi1.yy);vec4 iz0=Pi0.zzzz;vec4 iz1=Pi1.zzzz;vec4 ixy=permute(permute(ix)+iy);vec4 ixy0=permute(ixy+iz0);vec4 ixy1=permute(ixy+iz1);vec4 gx0=ixy0*(1.0/7.0);vec4 gy0=fract(floor(gx0)*(1.0/7.0))-0.5;gx0=fract(gx0);vec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);vec4 sz0=step(gz0,vec4(0.0));gx0-=sz0*(step(0.0,gx0)-0.5);gy0-=sz0*(step(0.0,gy0)-0.5);vec4 gx1=ixy1*(1.0/7.0);vec4 gy1=fract(floor(gx1)*(1.0/7.0))-0.5;gx1=fract(gx1);vec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);vec4 sz1=step(gz1,vec4(0.0));gx1-=sz1*(step(0.0,gx1)-0.5);gy1-=sz1*(step(0.0,gy1)-0.5);vec3 g000=vec3(gx0.x,gy0.x,gz0.x);vec3 g100=vec3(gx0.y,gy0.y,gz0.y);vec3 g010=vec3(gx0.z,gy0.z,gz0.z);vec3 g110=vec3(gx0.w,gy0.w,gz0.w);vec3 g001=vec3(gx1.x,gy1.x,gz1.x);vec3 g101=vec3(gx1.y,gy1.y,gz1.y);vec3 g011=vec3(gx1.z,gy1.z,gz1.z);vec3 g111=vec3(gx1.w,gy1.w,gz1.w);vec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));g000*=norm0.x;g010*=norm0.y;g100*=norm0.z;g110*=norm0.w;vec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));g001*=norm1.x;g011*=norm1.y;g101*=norm1.z;g111*=norm1.w;float n000=dot(g000,Pf0);float n100=dot(g100,vec3(Pf1.x,Pf0.yz));float n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));float n110=dot(g110,vec3(Pf1.xy,Pf0.z));float n001=dot(g001,vec3(Pf0.xy,Pf1.z));float n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));float n011=dot(g011,vec3(Pf0.x,Pf1.yz));float n111=dot(g111,Pf1);vec3 fade_xyz=fade(Pf0);vec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);vec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);float n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);return 2.2*n_xyz;}\n/* END FUNCTION */\nfloat turbulence( vec3 p ) {float w=100.0;float t=-.5;for (float f=1.0 ; f<=10.0 ; f++ ){float power=pow( 2.0,f );t+=abs( pnoise( vec3( power*p ),vec3( 10.0,10.0,10.0 ) )/power );}\nreturn t;}\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_VERTEX_MAIN_BEGIN\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\n#ifdef NORMAL\nnoise=10.0* -.10*turbulence( .5*normal+time*1.15 );float b=lowFrequencySpeed*5.0*pnoise( 0.05*position +vec3(time*1.025),vec3( 100.0 ) );float displacement=- 1.5*noise+b;vec3 newPosition=position+normal*displacement;gl_Position=viewProjection*finalWorld*vec4( newPosition,1.0 );vec4 worldPos=finalWorld*vec4(newPosition,1.0);vPositionW=vec3(worldPos);vNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x==0.)\n{vDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));}\nelse\n{vDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));}\n#endif\n#include<clipPlaneVertex>\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n#include<vertexColorMixing>\n#if defined(POINTSIZE) && !defined(WEBGPU)\ngl_PointSize=pointSize;\n#endif\n#define CUSTOM_VERTEX_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const lavaVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\nimport \"./lava.fragment\";\r\nimport \"./lava.vertex\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\r\n\r\nclass LavaMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public LIGHT0 = false;\r\n    public LIGHT1 = false;\r\n    public LIGHT2 = false;\r\n    public LIGHT3 = false;\r\n    public SPOTLIGHT0 = false;\r\n    public SPOTLIGHT1 = false;\r\n    public SPOTLIGHT2 = false;\r\n    public SPOTLIGHT3 = false;\r\n    public HEMILIGHT0 = false;\r\n    public HEMILIGHT1 = false;\r\n    public HEMILIGHT2 = false;\r\n    public HEMILIGHT3 = false;\r\n    public DIRLIGHT0 = false;\r\n    public DIRLIGHT1 = false;\r\n    public DIRLIGHT2 = false;\r\n    public DIRLIGHT3 = false;\r\n    public POINTLIGHT0 = false;\r\n    public POINTLIGHT1 = false;\r\n    public POINTLIGHT2 = false;\r\n    public POINTLIGHT3 = false;\r\n    public SHADOW0 = false;\r\n    public SHADOW1 = false;\r\n    public SHADOW2 = false;\r\n    public SHADOW3 = false;\r\n    public SHADOWS = false;\r\n    public SHADOWESM0 = false;\r\n    public SHADOWESM1 = false;\r\n    public SHADOWESM2 = false;\r\n    public SHADOWESM3 = false;\r\n    public SHADOWPOISSON0 = false;\r\n    public SHADOWPOISSON1 = false;\r\n    public SHADOWPOISSON2 = false;\r\n    public SHADOWPOISSON3 = false;\r\n    public SHADOWPCF0 = false;\r\n    public SHADOWPCF1 = false;\r\n    public SHADOWPCF2 = false;\r\n    public SHADOWPCF3 = false;\r\n    public SHADOWPCSS0 = false;\r\n    public SHADOWPCSS1 = false;\r\n    public SHADOWPCSS2 = false;\r\n    public SHADOWPCSS3 = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n    public UNLIT = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class LavaMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsTexture()\r\n    public noiseTexture: BaseTexture;\r\n\r\n    @serializeAsColor3()\r\n    public fogColor: Color3;\r\n\r\n    @serialize()\r\n    public speed: number = 1;\r\n\r\n    @serialize()\r\n    public movingSpeed: number = 1;\r\n\r\n    @serialize()\r\n    public lowFrequencySpeed: number = 1;\r\n\r\n    @serialize()\r\n    public fogDensity: number = 0.15;\r\n\r\n    private _lastTime: number = 0;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"unlit\")\r\n    private _unlit = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public unlit: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _scaledDiffuse = new Color3();\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new LavaMaterialDefines();\r\n        }\r\n\r\n        const defines = <LavaMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = true;\r\n\r\n        MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"lava\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vLightsType\",\r\n                \"vDiffuseColor\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"diffuseMatrix\",\r\n                \"time\",\r\n                \"speed\",\r\n                \"movingSpeed\",\r\n                \"fogColor\",\r\n                \"fogDensity\",\r\n                \"lowFrequencySpeed\",\r\n            ];\r\n            addClipPlaneUniforms(uniforms);\r\n\r\n            const samplers = [\"diffuseSampler\", \"noiseTexture\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <LavaMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        defines.UNLIT = this._unlit;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this.diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this.diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this.diffuseTexture.coordinatesIndex, this.diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this.diffuseTexture.getTextureMatrix());\r\n            }\r\n\r\n            if (this.noiseTexture) {\r\n                this._activeEffect.setTexture(\"noiseTexture\", this.noiseTexture);\r\n            }\r\n\r\n            // Clip plane\r\n            bindClipPlane(effect, this, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            scene.bindEyePosition(effect);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this._scaledDiffuse, this.alpha * mesh.visibility);\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._lastTime += scene.getEngine().getDeltaTime();\r\n        this._activeEffect.setFloat(\"time\", (this._lastTime * this.speed) / 1000);\r\n\r\n        if (!this.fogColor) {\r\n            this.fogColor = Color3.Black();\r\n        }\r\n        this._activeEffect.setColor3(\"fogColor\", this.fogColor);\r\n        this._activeEffect.setFloat(\"fogDensity\", this.fogDensity);\r\n\r\n        this._activeEffect.setFloat(\"lowFrequencySpeed\", this.lowFrequencySpeed);\r\n        this._activeEffect.setFloat(\"movingSpeed\", this.movingSpeed);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = [];\r\n\r\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\r\n            results.push(this.diffuseTexture);\r\n        }\r\n\r\n        if (this.noiseTexture && this.noiseTexture.animations && this.noiseTexture.animations.length > 0) {\r\n            results.push(this.noiseTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this.diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.diffuseTexture) {\r\n            this.diffuseTexture.dispose();\r\n        }\r\n        if (this.noiseTexture) {\r\n            this.noiseTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): LavaMaterial {\r\n        return SerializationHelper.Clone(() => new LavaMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.LavaMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"LavaMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): LavaMaterial {\r\n        return SerializationHelper.Parse(() => new LavaMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.LavaMaterial\", LavaMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/helperFunctions\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"core/Shaders/ShadersInclude/depthPrePass\";\nimport \"core/Shaders/ShadersInclude/lightFragment\";\nimport \"core/Shaders/ShadersInclude/fogFragment\";\nimport \"core/Shaders/ShadersInclude/imageProcessingCompatibility\";\n\nconst name = \"mixPixelShader\";\nconst shader = `precision highp float;\runiform vec4 vEyePosition;\runiform vec4 vDiffuseColor;\r#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\r#endif\nvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\r#endif\n#include<helperFunctions>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;\runiform sampler2D mixMap1Sampler;\runiform vec2 vTextureInfos;\r#ifdef MIXMAP2\nuniform sampler2D mixMap2Sampler;\r#endif\nuniform sampler2D diffuse1Sampler;\runiform sampler2D diffuse2Sampler;\runiform sampler2D diffuse3Sampler;\runiform sampler2D diffuse4Sampler;\runiform vec2 diffuse1Infos;\runiform vec2 diffuse2Infos;\runiform vec2 diffuse3Infos;\runiform vec2 diffuse4Infos;\r#ifdef MIXMAP2\nuniform sampler2D diffuse5Sampler;\runiform sampler2D diffuse6Sampler;\runiform sampler2D diffuse7Sampler;\runiform sampler2D diffuse8Sampler;\runiform vec2 diffuse5Infos;\runiform vec2 diffuse6Infos;\runiform vec2 diffuse7Infos;\runiform vec2 diffuse8Infos;\r#endif\n#endif\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n#include<fogFragmentDeclaration>\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);\rvec4 finalMixColor=vec4(1.,1.,1.,1.);\rvec3 diffuseColor=vDiffuseColor.rgb;\r#ifdef MIXMAP2\nvec4 mixColor2=vec4(1.,1.,1.,1.);\r#endif\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\rvec3 specularColor=vSpecularColor.rgb;\r#else\nfloat glossiness=0.;\r#endif\nfloat alpha=vDiffuseColor.a;\r#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\r#else\nvec3 normalW=vec3(1.0,1.0,1.0);\r#endif\n#ifdef DIFFUSE\nvec4 mixColor=texture2D(mixMap1Sampler,vTextureUV);\r#include<depthPrePass>\nmixColor.rgb*=vTextureInfos.y;\rvec4 diffuse1Color=texture2D(diffuse1Sampler,vTextureUV*diffuse1Infos);\rvec4 diffuse2Color=texture2D(diffuse2Sampler,vTextureUV*diffuse2Infos);\rvec4 diffuse3Color=texture2D(diffuse3Sampler,vTextureUV*diffuse3Infos);\rvec4 diffuse4Color=texture2D(diffuse4Sampler,vTextureUV*diffuse4Infos);\rdiffuse1Color.rgb*=mixColor.r;\rdiffuse2Color.rgb=mix(diffuse1Color.rgb,diffuse2Color.rgb,mixColor.g);\rdiffuse3Color.rgb=mix(diffuse2Color.rgb,diffuse3Color.rgb,mixColor.b);\rfinalMixColor.rgb=mix(diffuse3Color.rgb,diffuse4Color.rgb,1.0-mixColor.a);\r#ifdef MIXMAP2\nmixColor=texture2D(mixMap2Sampler,vTextureUV);\rmixColor.rgb*=vTextureInfos.y;\rvec4 diffuse5Color=texture2D(diffuse5Sampler,vTextureUV*diffuse5Infos);\rvec4 diffuse6Color=texture2D(diffuse6Sampler,vTextureUV*diffuse6Infos);\rvec4 diffuse7Color=texture2D(diffuse7Sampler,vTextureUV*diffuse7Infos);\rvec4 diffuse8Color=texture2D(diffuse8Sampler,vTextureUV*diffuse8Infos);\rdiffuse5Color.rgb=mix(finalMixColor.rgb,diffuse5Color.rgb,mixColor.r);\rdiffuse6Color.rgb=mix(diffuse5Color.rgb,diffuse6Color.rgb,mixColor.g);\rdiffuse7Color.rgb=mix(diffuse6Color.rgb,diffuse7Color.rgb,mixColor.b);\rfinalMixColor.rgb=mix(diffuse7Color.rgb,diffuse8Color.rgb,1.0-mixColor.a);\r#endif\n#endif\n#ifdef VERTEXCOLOR\nfinalMixColor.rgb*=vColor.rgb;\r#endif\nvec3 diffuseBase=vec3(0.,0.,0.);\rlightingInfo info;\rfloat shadow=1.;\r#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\r#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#if defined(VERTEXALPHA) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nalpha*=vColor.a;\r#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\r#else\nvec3 finalSpecular=vec3(0.0);\r#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor*finalMixColor.rgb,0.0,1.0);\rvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\r#include<fogFragment>\ngl_FragColor=color;\r#include<imageProcessingCompatibility>\n#define CUSTOM_FRAGMENT_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mixPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesVertex\";\nimport \"core/Shaders/ShadersInclude/bonesVertex\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimation\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"core/Shaders/ShadersInclude/fogVertex\";\nimport \"core/Shaders/ShadersInclude/shadowsVertex\";\nimport \"core/Shaders/ShadersInclude/vertexColorMixing\";\n\nconst name = \"mixVertexShader\";\nconst shader = `precision highp float;attribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<instancesDeclaration>\nuniform mat4 view;uniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;uniform mat4 textureMatrix;uniform vec2 vTextureInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_VERTEX_MAIN_BEGIN\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(position,1.0);gl_Position=viewProjection*worldPos;vPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vTextureInfos.x==0.)\n{vTextureUV=vec2(textureMatrix*vec4(uv,1.0,0.0));}\nelse\n{vTextureUV=vec2(textureMatrix*vec4(uv2,1.0,0.0));}\n#endif\n#include<clipPlaneVertex>\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n#include<vertexColorMixing>\n#if defined(POINTSIZE) && !defined(WEBGPU)\ngl_PointSize=pointSize;\n#endif\n#define CUSTOM_VERTEX_MAIN_END\n}\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mixVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\nimport \"./mix.fragment\";\r\nimport \"./mix.vertex\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\r\n\r\nclass MixMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n    public MIXMAP2 = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MixMaterial extends PushMaterial {\r\n    /**\r\n     * Mix textures\r\n     */\r\n\r\n    @serializeAsTexture(\"mixTexture1\")\r\n    private _mixTexture1: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public mixTexture1: BaseTexture;\r\n\r\n    @serializeAsTexture(\"mixTexture2\")\r\n    private _mixTexture2: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public mixTexture2: BaseTexture;\r\n\r\n    /**\r\n     * Diffuse textures\r\n     */\r\n\r\n    @serializeAsTexture(\"diffuseTexture1\")\r\n    private _diffuseTexture1: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture1: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture2\")\r\n    private _diffuseTexture2: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture2: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture3\")\r\n    private _diffuseTexture3: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture3: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture4\")\r\n    private _diffuseTexture4: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture4: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture1\")\r\n    private _diffuseTexture5: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture5: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture2\")\r\n    private _diffuseTexture6: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture6: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture3\")\r\n    private _diffuseTexture7: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture7: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture4\")\r\n    private _diffuseTexture8: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture8: Texture;\r\n\r\n    /**\r\n     * Uniforms\r\n     */\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serializeAsColor3()\r\n    public specularColor = new Color3(0, 0, 0);\r\n\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MixMaterialDefines();\r\n        }\r\n\r\n        const defines = <MixMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (!this._mixTexture1 || !this._mixTexture1.isReady()) {\r\n                return false;\r\n            }\r\n\r\n            defines._needUVs = true;\r\n\r\n            if (MaterialFlags.DiffuseTextureEnabled) {\r\n                if (!this._diffuseTexture1 || !this._diffuseTexture1.isReady()) {\r\n                    return false;\r\n                }\r\n\r\n                defines.DIFFUSE = true;\r\n\r\n                if (!this._diffuseTexture2 || !this._diffuseTexture2.isReady()) {\r\n                    return false;\r\n                }\r\n                if (!this._diffuseTexture3 || !this._diffuseTexture3.isReady()) {\r\n                    return false;\r\n                }\r\n                if (!this._diffuseTexture4 || !this._diffuseTexture4.isReady()) {\r\n                    return false;\r\n                }\r\n\r\n                if (this._mixTexture2) {\r\n                    if (!this._mixTexture2.isReady()) {\r\n                        return false;\r\n                    }\r\n\r\n                    defines.MIXMAP2 = true;\r\n\r\n                    if (!this._diffuseTexture5 || !this._diffuseTexture5.isReady()) {\r\n                        return false;\r\n                    }\r\n                    if (!this._diffuseTexture6 || !this._diffuseTexture6.isReady()) {\r\n                        return false;\r\n                    }\r\n                    if (!this._diffuseTexture7 || !this._diffuseTexture7.isReady()) {\r\n                        return false;\r\n                    }\r\n                    if (!this._diffuseTexture8 || !this._diffuseTexture8.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mix\";\r\n            const join = defines.toString();\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vLightsType\",\r\n                \"vDiffuseColor\",\r\n                \"vSpecularColor\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"vTextureInfos\",\r\n                \"mBones\",\r\n                \"textureMatrix\",\r\n                \"diffuse1Infos\",\r\n                \"diffuse2Infos\",\r\n                \"diffuse3Infos\",\r\n                \"diffuse4Infos\",\r\n                \"diffuse5Infos\",\r\n                \"diffuse6Infos\",\r\n                \"diffuse7Infos\",\r\n                \"diffuse8Infos\",\r\n            ];\r\n            const samplers = [\r\n                \"mixMap1Sampler\",\r\n                \"mixMap2Sampler\",\r\n                \"diffuse1Sampler\",\r\n                \"diffuse2Sampler\",\r\n                \"diffuse3Sampler\",\r\n                \"diffuse4Sampler\",\r\n                \"diffuse5Sampler\",\r\n                \"diffuse6Sampler\",\r\n                \"diffuse7Sampler\",\r\n                \"diffuse8Sampler\",\r\n            ];\r\n\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            addClipPlaneUniforms(uniforms);\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <MixMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._mixTexture1) {\r\n                this._activeEffect.setTexture(\"mixMap1Sampler\", this._mixTexture1);\r\n                this._activeEffect.setFloat2(\"vTextureInfos\", this._mixTexture1.coordinatesIndex, this._mixTexture1.level);\r\n                this._activeEffect.setMatrix(\"textureMatrix\", this._mixTexture1.getTextureMatrix());\r\n\r\n                if (MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (this._diffuseTexture1) {\r\n                        this._activeEffect.setTexture(\"diffuse1Sampler\", this._diffuseTexture1);\r\n                        this._activeEffect.setFloat2(\"diffuse1Infos\", this._diffuseTexture1.uScale, this._diffuseTexture1.vScale);\r\n                    }\r\n                    if (this._diffuseTexture2) {\r\n                        this._activeEffect.setTexture(\"diffuse2Sampler\", this._diffuseTexture2);\r\n                        this._activeEffect.setFloat2(\"diffuse2Infos\", this._diffuseTexture2.uScale, this._diffuseTexture2.vScale);\r\n                    }\r\n                    if (this._diffuseTexture3) {\r\n                        this._activeEffect.setTexture(\"diffuse3Sampler\", this._diffuseTexture3);\r\n                        this._activeEffect.setFloat2(\"diffuse3Infos\", this._diffuseTexture3.uScale, this._diffuseTexture3.vScale);\r\n                    }\r\n                    if (this._diffuseTexture4) {\r\n                        this._activeEffect.setTexture(\"diffuse4Sampler\", this._diffuseTexture4);\r\n                        this._activeEffect.setFloat2(\"diffuse4Infos\", this._diffuseTexture4.uScale, this._diffuseTexture4.vScale);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this._mixTexture2) {\r\n                this._activeEffect.setTexture(\"mixMap2Sampler\", this._mixTexture2);\r\n\r\n                if (MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (this._diffuseTexture5) {\r\n                        this._activeEffect.setTexture(\"diffuse5Sampler\", this._diffuseTexture5);\r\n                        this._activeEffect.setFloat2(\"diffuse5Infos\", this._diffuseTexture5.uScale, this._diffuseTexture5.vScale);\r\n                    }\r\n                    if (this._diffuseTexture6) {\r\n                        this._activeEffect.setTexture(\"diffuse6Sampler\", this._diffuseTexture6);\r\n                        this._activeEffect.setFloat2(\"diffuse6Infos\", this._diffuseTexture6.uScale, this._diffuseTexture6.vScale);\r\n                    }\r\n                    if (this._diffuseTexture7) {\r\n                        this._activeEffect.setTexture(\"diffuse7Sampler\", this._diffuseTexture7);\r\n                        this._activeEffect.setFloat2(\"diffuse7Infos\", this._diffuseTexture7.uScale, this._diffuseTexture7.vScale);\r\n                    }\r\n                    if (this._diffuseTexture8) {\r\n                        this._activeEffect.setTexture(\"diffuse8Sampler\", this._diffuseTexture8);\r\n                        this._activeEffect.setFloat2(\"diffuse8Infos\", this._diffuseTexture8.uScale, this._diffuseTexture8.vScale);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Clip plane\r\n            bindClipPlane(effect, this, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            scene.bindEyePosition(effect);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = [];\r\n\r\n        if (this._mixTexture1 && this._mixTexture1.animations && this._mixTexture1.animations.length > 0) {\r\n            results.push(this._mixTexture1);\r\n        }\r\n\r\n        if (this._mixTexture2 && this._mixTexture2.animations && this._mixTexture2.animations.length > 0) {\r\n            results.push(this._mixTexture2);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        // Mix map 1\r\n        if (this._mixTexture1) {\r\n            activeTextures.push(this._mixTexture1);\r\n        }\r\n\r\n        if (this._diffuseTexture1) {\r\n            activeTextures.push(this._diffuseTexture1);\r\n        }\r\n\r\n        if (this._diffuseTexture2) {\r\n            activeTextures.push(this._diffuseTexture2);\r\n        }\r\n\r\n        if (this._diffuseTexture3) {\r\n            activeTextures.push(this._diffuseTexture3);\r\n        }\r\n\r\n        if (this._diffuseTexture4) {\r\n            activeTextures.push(this._diffuseTexture4);\r\n        }\r\n\r\n        // Mix map 2\r\n        if (this._mixTexture2) {\r\n            activeTextures.push(this._mixTexture2);\r\n        }\r\n\r\n        if (this._diffuseTexture5) {\r\n            activeTextures.push(this._diffuseTexture5);\r\n        }\r\n\r\n        if (this._diffuseTexture6) {\r\n            activeTextures.push(this._diffuseTexture6);\r\n        }\r\n\r\n        if (this._diffuseTexture7) {\r\n            activeTextures.push(this._diffuseTexture7);\r\n        }\r\n\r\n        if (this._diffuseTexture8) {\r\n            activeTextures.push(this._diffuseTexture8);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        // Mix map 1\r\n        if (this._mixTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture3 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture4 === texture) {\r\n            return true;\r\n        }\r\n\r\n        // Mix map 2\r\n        if (this._mixTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture5 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture6 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture7 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture8 === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._mixTexture1) {\r\n            this._mixTexture1.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MixMaterial {\r\n        return SerializationHelper.Clone(() => new MixMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.MixMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MixMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MixMaterial {\r\n        return SerializationHelper.Parse(() => new MixMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.MixMaterial\", MixMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/helperFunctions\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"core/Shaders/ShadersInclude/depthPrePass\";\nimport \"core/Shaders/ShadersInclude/lightFragment\";\nimport \"core/Shaders/ShadersInclude/fogFragment\";\nimport \"core/Shaders/ShadersInclude/imageProcessingCompatibility\";\n\nconst name = \"normalPixelShader\";\nconst shader = `precision highp float;\runiform vec4 vEyePosition;\runiform vec4 vDiffuseColor;\rvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#ifdef LIGHTING\n#include<helperFunctions>\n#include<__decl__lightFragment>[0]\n#include<__decl__lightFragment>[1]\n#include<__decl__lightFragment>[2]\n#include<__decl__lightFragment>[3]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#endif\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\runiform sampler2D diffuseSampler;\runiform vec2 vDiffuseInfos;\r#endif\n#include<clipPlaneFragmentDeclaration>\n#include<fogFragmentDeclaration>\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);\rvec4 baseColor=vec4(1.,1.,1.,1.);\rvec3 diffuseColor=vDiffuseColor.rgb;\rfloat alpha=vDiffuseColor.a;\r#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\r#ifdef ALPHATEST\nif (baseColor.a<0.4)\rdiscard;\r#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\r#endif\n#ifdef NORMAL\nbaseColor=mix(baseColor,vec4(vNormalW,1.0),0.5);\r#endif\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\r#else\nvec3 normalW=vec3(1.0,1.0,1.0);\r#endif\n#ifdef LIGHTING\nvec3 diffuseBase=vec3(0.,0.,0.);\rlightingInfo info;\rfloat shadow=1.;\rfloat glossiness=0.;\r#include<lightFragment>[0]\n#include<lightFragment>[1]\n#include<lightFragment>[2]\n#include<lightFragment>[3]\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\r#else\nvec3 finalDiffuse= baseColor.rgb;\r#endif\nvec4 color=vec4(finalDiffuse,alpha);\r#include<fogFragment>\ngl_FragColor=color;\r#include<imageProcessingCompatibility>\n#define CUSTOM_FRAGMENT_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const normalPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesVertex\";\nimport \"core/Shaders/ShadersInclude/bonesVertex\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimation\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"core/Shaders/ShadersInclude/fogVertex\";\nimport \"core/Shaders/ShadersInclude/shadowsVertex\";\n\nconst name = \"normalVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\r#ifdef NORMAL\nattribute vec3 normal;\r#endif\n#ifdef UV1\nattribute vec2 uv;\r#endif\n#ifdef UV2\nattribute vec2 uv2;\r#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\r#endif\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<instancesDeclaration>\nuniform mat4 view;\runiform mat4 viewProjection;\r#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\runiform mat4 diffuseMatrix;\runiform vec2 vDiffuseInfos;\r#endif\n#ifdef POINTSIZE\nuniform float pointSize;\r#endif\nvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_VERTEX_MAIN_BEGIN\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(position,1.0);\rgl_Position=viewProjection*worldPos;\rvPositionW=vec3(worldPos);\r#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\r#endif\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\r#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\r#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x==0.)\r{\rvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\r}\relse\r{\rvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\r}\r#endif\n#include<clipPlaneVertex>\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n#if defined(POINTSIZE) && !defined(WEBGPU)\ngl_PointSize=pointSize;\r#endif\n#define CUSTOM_VERTEX_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const normalVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\nimport \"./normal.fragment\";\r\nimport \"./normal.vertex\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\r\n\r\nclass NormalMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public LIGHT0 = false;\r\n    public LIGHT1 = false;\r\n    public LIGHT2 = false;\r\n    public LIGHT3 = false;\r\n    public SPOTLIGHT0 = false;\r\n    public SPOTLIGHT1 = false;\r\n    public SPOTLIGHT2 = false;\r\n    public SPOTLIGHT3 = false;\r\n    public HEMILIGHT0 = false;\r\n    public HEMILIGHT1 = false;\r\n    public HEMILIGHT2 = false;\r\n    public HEMILIGHT3 = false;\r\n    public DIRLIGHT0 = false;\r\n    public DIRLIGHT1 = false;\r\n    public DIRLIGHT2 = false;\r\n    public DIRLIGHT3 = false;\r\n    public POINTLIGHT0 = false;\r\n    public POINTLIGHT1 = false;\r\n    public POINTLIGHT2 = false;\r\n    public POINTLIGHT3 = false;\r\n    public SHADOW0 = false;\r\n    public SHADOW1 = false;\r\n    public SHADOW2 = false;\r\n    public SHADOW3 = false;\r\n    public SHADOWS = false;\r\n    public SHADOWESM0 = false;\r\n    public SHADOWESM1 = false;\r\n    public SHADOWESM2 = false;\r\n    public SHADOWESM3 = false;\r\n    public SHADOWPOISSON0 = false;\r\n    public SHADOWPOISSON1 = false;\r\n    public SHADOWPOISSON2 = false;\r\n    public SHADOWPOISSON3 = false;\r\n    public SHADOWPCF0 = false;\r\n    public SHADOWPCF1 = false;\r\n    public SHADOWPCF2 = false;\r\n    public SHADOWPCF3 = false;\r\n    public SHADOWPCSS0 = false;\r\n    public SHADOWPCSS1 = false;\r\n    public SHADOWPCSS2 = false;\r\n    public SHADOWPCSS3 = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public LIGHTING = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class NormalMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0;\r\n    }\r\n\r\n    public needAlphaBlendingForMesh(mesh: AbstractMesh): boolean {\r\n        return this.needAlphaBlending() || mesh.visibility < 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new NormalMaterialDefines();\r\n        }\r\n\r\n        const defines = <NormalMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = true;\r\n        MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\r\n\r\n        defines.LIGHTING = !this._disableLighting;\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            const shaderName = \"normal\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vLightsType\",\r\n                \"vDiffuseColor\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"diffuseMatrix\",\r\n            ];\r\n            const samplers = [\"diffuseSampler\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            addClipPlaneUniforms(uniforms);\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <NormalMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this.diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this.diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this.diffuseTexture.coordinatesIndex, this.diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this.diffuseTexture.getTextureMatrix());\r\n            }\r\n            // Clip plane\r\n            bindClipPlane(effect, this, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            scene.bindEyePosition(effect);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = [];\r\n\r\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\r\n            results.push(this.diffuseTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this.diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.diffuseTexture) {\r\n            this.diffuseTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): NormalMaterial {\r\n        return SerializationHelper.Clone(() => new NormalMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.NormalMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"NormalMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): NormalMaterial {\r\n        return SerializationHelper.Parse(() => new NormalMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.NormalMaterial\", NormalMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/helperFunctions\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"core/Shaders/ShadersInclude/lightFragment\";\nimport \"core/Shaders/ShadersInclude/fogFragment\";\nimport \"core/Shaders/ShadersInclude/imageProcessingCompatibility\";\n\nconst name = \"shadowOnlyPixelShader\";\nconst shader = `precision highp float;\runiform vec4 vEyePosition;\runiform float alpha;\runiform vec3 shadowColor;\rvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#include<helperFunctions>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n#include<fogFragmentDeclaration>\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);\r#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\r#else\nvec3 normalW=vec3(1.0,1.0,1.0);\r#endif\nvec3 diffuseBase=vec3(0.,0.,0.);\rlightingInfo info;\rfloat shadow=1.;\rfloat glossiness=0.;\r#include<lightFragment>[0..1]\nvec4 color=vec4(shadowColor,(1.0-clamp(shadow,0.,1.))*alpha);\r#include<fogFragment>\ngl_FragColor=color;\r#include<imageProcessingCompatibility>\n#define CUSTOM_FRAGMENT_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const shadowOnlyPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesVertex\";\nimport \"core/Shaders/ShadersInclude/bonesVertex\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimation\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"core/Shaders/ShadersInclude/fogVertex\";\nimport \"core/Shaders/ShadersInclude/shadowsVertex\";\n\nconst name = \"shadowOnlyVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\r#ifdef NORMAL\nattribute vec3 normal;\r#endif\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<instancesDeclaration>\nuniform mat4 view;\runiform mat4 viewProjection;\r#ifdef POINTSIZE\nuniform float pointSize;\r#endif\nvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\r#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_VERTEX_MAIN_BEGIN\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(position,1.0);\rgl_Position=viewProjection*worldPos;\rvPositionW=vec3(worldPos);\r#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\r#endif\n#include<clipPlaneVertex>\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n#if defined(POINTSIZE) && !defined(WEBGPU)\ngl_PointSize=pointSize;\r#endif\n#define CUSTOM_VERTEX_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const shadowOnlyVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IShadowLight } from \"core/Lights/shadowLight\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\nimport \"./shadowOnly.fragment\";\r\nimport \"./shadowOnly.vertex\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport type { CascadedShadowGenerator } from \"core/Lights/Shadows/cascadedShadowGenerator\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\r\n\r\nclass ShadowOnlyMaterialDefines extends MaterialDefines {\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class ShadowOnlyMaterial extends PushMaterial {\r\n    private _activeLight: IShadowLight;\r\n    private _needAlphaBlending = true;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public shadowColor = Color3.Black();\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this._needAlphaBlending;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public get activeLight(): IShadowLight {\r\n        return this._activeLight;\r\n    }\r\n\r\n    public set activeLight(light: IShadowLight) {\r\n        this._activeLight = light;\r\n    }\r\n\r\n    private _getFirstShadowLightForMesh(mesh: AbstractMesh): Nullable<IShadowLight> {\r\n        for (const light of mesh.lightSources) {\r\n            if (light.shadowEnabled) {\r\n                return light as IShadowLight;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new ShadowOnlyMaterialDefines();\r\n        }\r\n\r\n        const defines = <ShadowOnlyMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Ensure that active light is the first shadow light\r\n        if (this._activeLight) {\r\n            for (const light of mesh.lightSources) {\r\n                if (light.shadowEnabled) {\r\n                    if (this._activeLight === light) {\r\n                        break; // We are good\r\n                    }\r\n\r\n                    const lightPosition = mesh.lightSources.indexOf(this._activeLight);\r\n\r\n                    if (lightPosition !== -1) {\r\n                        mesh.lightSources.splice(lightPosition, 1);\r\n                        mesh.lightSources.splice(0, 0, this._activeLight);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, 1);\r\n\r\n        const shadowGenerator = this._getFirstShadowLightForMesh(mesh)?.getShadowGenerator();\r\n\r\n        this._needAlphaBlending = true;\r\n\r\n        if (shadowGenerator && (shadowGenerator as any).getClassName && (shadowGenerator as any).getClassName() === \"CascadedShadowGenerator\") {\r\n            const csg = shadowGenerator as CascadedShadowGenerator;\r\n\r\n            this._needAlphaBlending = !csg.autoCalcDepthBounds;\r\n        }\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, 1);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            const shaderName = \"shadowOnly\";\r\n            const join = defines.toString();\r\n            const uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vFogInfos\", \"vFogColor\", \"pointSize\", \"alpha\", \"shadowColor\", \"mBones\"];\r\n            const samplers = new Array<string>();\r\n\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            addClipPlaneUniforms(uniforms);\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 1,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 1 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <ShadowOnlyMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Clip plane\r\n            bindClipPlane(effect, this, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            this._activeEffect.setFloat(\"alpha\", this.alpha);\r\n            this._activeEffect.setColor3(\"shadowColor\", this.shadowColor);\r\n\r\n            scene.bindEyePosition(effect);\r\n        }\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, 1);\r\n\r\n            const light = this._getFirstShadowLightForMesh(mesh);\r\n\r\n            if (light) {\r\n                // Make sure the uniforms for this light will be rebound for other materials using this light when rendering the current frame.\r\n                // Indeed, there is an optimization in Light that binds the light uniforms only once per frame for a given light (if using ubo).\r\n                // Doing this way assumes that all uses of this light are the same, meaning all parameters passed to Light._bindLlight\r\n                // are the same, notably useSpecular. However, isReadyForSubMesh (see above) is passing false for this parameter, which may not be\r\n                // the value the other materials may pass.\r\n                light._renderId = -1;\r\n            }\r\n        }\r\n\r\n        // View\r\n        if ((scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) || defines[\"SHADOWCSM0\"]) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public clone(name: string): ShadowOnlyMaterial {\r\n        return SerializationHelper.Clone<ShadowOnlyMaterial>(() => new ShadowOnlyMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.ShadowOnlyMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"ShadowOnlyMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): ShadowOnlyMaterial {\r\n        return SerializationHelper.Parse(() => new ShadowOnlyMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ShadowOnlyMaterial\", ShadowOnlyMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/helperFunctions\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"core/Shaders/ShadersInclude/depthPrePass\";\nimport \"core/Shaders/ShadersInclude/lightFragment\";\nimport \"core/Shaders/ShadersInclude/fogFragment\";\nimport \"core/Shaders/ShadersInclude/imageProcessingCompatibility\";\n\nconst name = \"simplePixelShader\";\nconst shader = `precision highp float;\runiform vec4 vEyePosition;\runiform vec4 vDiffuseColor;\rvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nvarying vec4 vColor;\r#endif\n#include<helperFunctions>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\runiform sampler2D diffuseSampler;\runiform vec2 vDiffuseInfos;\r#endif\n#include<clipPlaneFragmentDeclaration>\n#include<fogFragmentDeclaration>\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);\rvec4 baseColor=vec4(1.,1.,1.,1.);\rvec3 diffuseColor=vDiffuseColor.rgb;\rfloat alpha=vDiffuseColor.a;\r#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\r#ifdef ALPHATEST\nif (baseColor.a<0.4)\rdiscard;\r#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\r#endif\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nbaseColor.rgb*=vColor.rgb;\r#endif\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\r#else\nvec3 normalW=vec3(1.0,1.0,1.0);\r#endif\nvec3 diffuseBase=vec3(0.,0.,0.);\rlightingInfo info;\rfloat shadow=1.;\rfloat glossiness=0.;\r#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\r#endif \n#include<lightFragment>[0..maxSimultaneousLights]\n#if defined(VERTEXALPHA) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nalpha*=vColor.a;\r#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\rvec4 color=vec4(finalDiffuse,alpha);\r#include<fogFragment>\ngl_FragColor=color;\r#include<imageProcessingCompatibility>\n#define CUSTOM_FRAGMENT_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const simplePixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesVertex\";\nimport \"core/Shaders/ShadersInclude/bonesVertex\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimation\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"core/Shaders/ShadersInclude/fogVertex\";\nimport \"core/Shaders/ShadersInclude/shadowsVertex\";\nimport \"core/Shaders/ShadersInclude/vertexColorMixing\";\n\nconst name = \"simpleVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\r#ifdef NORMAL\nattribute vec3 normal;\r#endif\n#ifdef UV1\nattribute vec2 uv;\r#endif\n#ifdef UV2\nattribute vec2 uv2;\r#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\r#endif\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<instancesDeclaration>\nuniform mat4 view;\runiform mat4 viewProjection;\r#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\runiform mat4 diffuseMatrix;\runiform vec2 vDiffuseInfos;\r#endif\n#ifdef POINTSIZE\nuniform float pointSize;\r#endif\nvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nvarying vec4 vColor;\r#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_VERTEX_MAIN_BEGIN\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(position,1.0);\rgl_Position=viewProjection*worldPos;\rvPositionW=vec3(worldPos);\r#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\r#endif\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\r#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\r#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x==0.)\r{\rvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\r}\relse\r{\rvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\r}\r#endif\n#include<clipPlaneVertex>\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n#include<vertexColorMixing>\n#if defined(POINTSIZE) && !defined(WEBGPU)\ngl_PointSize=pointSize;\r#endif\n#define CUSTOM_VERTEX_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const simpleVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\nimport \"./simple.fragment\";\r\nimport \"./simple.vertex\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\r\n\r\nclass SimpleMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class SimpleMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new SimpleMaterialDefines();\r\n        }\r\n\r\n        const defines = <SimpleMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            const shaderName = \"simple\";\r\n            const join = defines.toString();\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vLightsType\",\r\n                \"vDiffuseColor\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"diffuseMatrix\",\r\n            ];\r\n            const samplers = [\"diffuseSampler\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            addClipPlaneUniforms(uniforms);\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights,\r\n            });\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights - 1 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <SimpleMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n            }\r\n\r\n            // Clip plane\r\n            bindClipPlane(effect, this, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            scene.bindEyePosition(effect);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = [];\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this.diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._diffuseTexture) {\r\n            this._diffuseTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): SimpleMaterial {\r\n        return SerializationHelper.Clone<SimpleMaterial>(() => new SimpleMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.SimpleMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"SimpleMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): SimpleMaterial {\r\n        return SerializationHelper.Parse(() => new SimpleMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SimpleMaterial\", SimpleMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/helperFunctions\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"core/Shaders/ShadersInclude/fogFragment\";\nimport \"core/Shaders/ShadersInclude/imageProcessingCompatibility\";\n\nconst name = \"skyPixelShader\";\nconst shader = `precision highp float;\rvarying vec3 vPositionW;\r#ifdef VERTEXCOLOR\nvarying vec4 vColor;\r#endif\n#include<clipPlaneFragmentDeclaration>\nuniform vec3 cameraPosition;\runiform vec3 cameraOffset;\runiform vec3 up;\runiform float luminance;\runiform float turbidity;\runiform float rayleigh;\runiform float mieCoefficient;\runiform float mieDirectionalG;\runiform vec3 sunPosition;\r#include<fogFragmentDeclaration>\nconst float e=2.71828182845904523536028747135266249775724709369995957;\rconst float pi=3.141592653589793238462643383279502884197169;\rconst float n=1.0003;\rconst float N=2.545E25;\rconst float pn=0.035;\rconst vec3 lambda=vec3(680E-9,550E-9,450E-9);\rconst vec3 K=vec3(0.686,0.678,0.666);\rconst float v=4.0;\rconst float rayleighZenithLength=8.4E3;\rconst float mieZenithLength=1.25E3;\rconst float EE=1000.0;\rconst float sunAngularDiameterCos=0.999956676946448443553574619906976478926848692873900859324;\rconst float cutoffAngle=pi/1.95;\rconst float steepness=1.5;\rvec3 totalRayleigh(vec3 lambda)\r{\rreturn (8.0*pow(pi,3.0)*pow(pow(n,2.0)-1.0,2.0)*(6.0+3.0*pn))/(3.0*N*pow(lambda,vec3(4.0))*(6.0-7.0*pn));\r}\rvec3 simplifiedRayleigh()\r{\rreturn 0.0005/vec3(94,40,18);\r}\rfloat rayleighPhase(float cosTheta)\r{ \rreturn (3.0/(16.0*pi))*(1.0+pow(cosTheta,2.0));\r}\rvec3 totalMie(vec3 lambda,vec3 K,float T)\r{\rfloat c=(0.2*T )*10E-18;\rreturn 0.434*c*pi*pow((2.0*pi)/lambda,vec3(v-2.0))*K;\r}\rfloat hgPhase(float cosTheta,float g)\r{\rreturn (1.0/(4.0*pi))*((1.0-pow(g,2.0))/pow(1.0-2.0*g*cosTheta+pow(g,2.0),1.5));\r}\rfloat sunIntensity(float zenithAngleCos)\r{\rreturn EE*max(0.0,1.0-exp((-(cutoffAngle-acos(zenithAngleCos))/steepness)));\r}\rfloat A=0.15;\rfloat B=0.50;\rfloat C=0.10;\rfloat D=0.20;\rfloat EEE=0.02;\rfloat F=0.30;\rfloat W=1000.0;\rvec3 Uncharted2Tonemap(vec3 x)\r{\rreturn ((x*(A*x+C*B)+D*EEE)/(x*(A*x+B)+D*F))-EEE/F;\r}\r#if DITHER\n#include<helperFunctions>\n#endif\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\n/**\r*--------------------------------------------------------------------------------------------------\r* Sky Color\r*--------------------------------------------------------------------------------------------------\r*/\rfloat sunfade=1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);\rfloat rayleighCoefficient=rayleigh-(1.0*(1.0-sunfade));\rvec3 sunDirection=normalize(sunPosition);\rfloat sunE=sunIntensity(dot(sunDirection,up));\rvec3 betaR=simplifiedRayleigh()*rayleighCoefficient;\rvec3 betaM=totalMie(lambda,K,turbidity)*mieCoefficient;\rfloat zenithAngle=acos(max(0.0,dot(up,normalize(vPositionW-cameraPosition+cameraOffset))));\rfloat sR=rayleighZenithLength/(cos(zenithAngle)+0.15*pow(93.885-((zenithAngle*180.0)/pi),-1.253));\rfloat sM=mieZenithLength/(cos(zenithAngle)+0.15*pow(93.885-((zenithAngle*180.0)/pi),-1.253));\rvec3 Fex=exp(-(betaR*sR+betaM*sM));\rfloat cosTheta=dot(normalize(vPositionW-cameraPosition),sunDirection);\rfloat rPhase=rayleighPhase(cosTheta*0.5+0.5);\rvec3 betaRTheta=betaR*rPhase;\rfloat mPhase=hgPhase(cosTheta,mieDirectionalG);\rvec3 betaMTheta=betaM*mPhase;\rvec3 Lin=pow(sunE*((betaRTheta+betaMTheta)/(betaR+betaM))*(1.0-Fex),vec3(1.5));\rLin*=mix(vec3(1.0),pow(sunE*((betaRTheta+betaMTheta)/(betaR+betaM))*Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up,sunDirection),5.0),0.0,1.0));\rvec3 direction=normalize(vPositionW-cameraPosition);\rfloat theta=acos(direction.y);\rfloat phi=atan(direction.z,direction.x);\rvec2 uv=vec2(phi,theta)/vec2(2.0*pi,pi)+vec2(0.5,0.0);\rvec3 L0=vec3(0.1)*Fex;\rfloat sundisk=smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);\rL0+=(sunE*19000.0*Fex)*sundisk;\rvec3 whiteScale=1.0/Uncharted2Tonemap(vec3(W));\rvec3 texColor=(Lin+L0);\rtexColor*=0.04 ;\rtexColor+=vec3(0.0,0.001,0.0025)*0.3;\rfloat g_fMaxLuminance=1.0;\rfloat fLumScaled=0.1/luminance; \rfloat fLumCompressed=(fLumScaled*(1.0+(fLumScaled/(g_fMaxLuminance*g_fMaxLuminance))))/(1.0+fLumScaled); \rfloat ExposureBias=fLumCompressed;\rvec3 curr=Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);\rvec3 retColor=curr*whiteScale;\r/**\r*--------------------------------------------------------------------------------------------------\r* Sky Color\r*--------------------------------------------------------------------------------------------------\r*/\rfloat alpha=1.0;\r#ifdef VERTEXCOLOR\nretColor.rgb*=vColor.rgb;\r#endif\n#if defined(VERTEXALPHA) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nalpha*=vColor.a;\r#endif\n#if DITHER\nretColor.rgb+=dither(gl_FragCoord.xy,0.5);\r#endif\nvec4 color=clamp(vec4(retColor.rgb,alpha),0.0,1.0);\r#include<fogFragment>\ngl_FragColor=color;\r#include<imageProcessingCompatibility>\n#define CUSTOM_FRAGMENT_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const skyPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"core/Shaders/ShadersInclude/fogVertex\";\n\nconst name = \"skyVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\r#ifdef VERTEXCOLOR\nattribute vec4 color;\r#endif\nuniform mat4 world;\runiform mat4 view;\runiform mat4 viewProjection;\r#ifdef POINTSIZE\nuniform float pointSize;\r#endif\nvarying vec3 vPositionW;\r#ifdef VERTEXCOLOR\nvarying vec4 vColor;\r#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_VERTEX_MAIN_BEGIN\ngl_Position=viewProjection*world*vec4(position,1.0);\rvec4 worldPos=world*vec4(position,1.0);\rvPositionW=vec3(worldPos);\r#include<clipPlaneVertex>\n#include<fogVertex>\n#ifdef VERTEXCOLOR\nvColor=color;\r#endif\n#if defined(POINTSIZE) && !defined(WEBGPU)\ngl_PointSize=pointSize;\r#endif\n#define CUSTOM_VERTEX_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const skyVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsVector3, serialize, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3, Quaternion } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\nimport \"./sky.fragment\";\r\nimport \"./sky.vertex\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\r\n\r\n/** @internal */\r\nclass SkyMaterialDefines extends MaterialDefines {\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n    public DITHER = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * This is the sky material which allows to create dynamic and texture free effects for skyboxes.\r\n * @see https://doc.babylonjs.com/toolsAndResources/assetLibraries/materialsLibrary/skyMat\r\n */\r\nexport class SkyMaterial extends PushMaterial {\r\n    /**\r\n     * Defines the overall luminance of sky in interval ]0, 1[.\r\n     */\r\n    @serialize()\r\n    public luminance: number = 1.0;\r\n\r\n    /**\r\n     * Defines the amount (scattering) of haze as opposed to molecules in atmosphere.\r\n     */\r\n    @serialize()\r\n    public turbidity: number = 10.0;\r\n\r\n    /**\r\n     * Defines the sky appearance (light intensity).\r\n     */\r\n    @serialize()\r\n    public rayleigh: number = 2.0;\r\n\r\n    /**\r\n     * Defines the mieCoefficient in interval [0, 0.1] which affects the property .mieDirectionalG.\r\n     */\r\n    @serialize()\r\n    public mieCoefficient: number = 0.005;\r\n\r\n    /**\r\n     * Defines the amount of haze particles following the Mie scattering theory.\r\n     */\r\n    @serialize()\r\n    public mieDirectionalG: number = 0.8;\r\n\r\n    /**\r\n     * Defines the distance of the sun according to the active scene camera.\r\n     */\r\n    @serialize()\r\n    public distance: number = 500;\r\n\r\n    /**\r\n     * Defines the sun inclination, in interval [-0.5, 0.5]. When the inclination is not 0, the sun is said\r\n     * \"inclined\".\r\n     */\r\n    @serialize()\r\n    public inclination: number = 0.49;\r\n\r\n    /**\r\n     * Defines the solar azimuth in interval [0, 1]. The azimuth is the angle in the horizontal plan between\r\n     * an object direction and a reference direction.\r\n     */\r\n    @serialize()\r\n    public azimuth: number = 0.25;\r\n\r\n    /**\r\n     * Defines the sun position in the sky on (x,y,z). If the property .useSunPosition is set to false, then\r\n     * the property is overridden by the inclination and the azimuth and can be read at any moment.\r\n     */\r\n    @serializeAsVector3()\r\n    public sunPosition: Vector3 = new Vector3(0, 100, 0);\r\n\r\n    /**\r\n     * Defines if the sun position should be computed (inclination and azimuth) according to the given\r\n     * .sunPosition property.\r\n     */\r\n    @serialize()\r\n    public useSunPosition: boolean = false;\r\n\r\n    /**\r\n     * Defines an offset vector used to get a horizon offset.\r\n     * @example skyMaterial.cameraOffset.y = camera.globalPosition.y // Set horizon relative to 0 on the Y axis\r\n     */\r\n    @serializeAsVector3()\r\n    public cameraOffset: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Defines the vector the skyMaterial should consider as up. (default is Vector3(0, 1, 0) as returned by Vector3.Up())\r\n     */\r\n    @serializeAsVector3()\r\n    public up: Vector3 = Vector3.Up();\r\n\r\n    /**\r\n     * Defines if sky should be dithered.\r\n     */\r\n    @serialize()\r\n    public dithering: boolean = false;\r\n\r\n    // Private members\r\n    private _cameraPosition: Vector3 = Vector3.Zero();\r\n    private _skyOrientation: Quaternion = new Quaternion();\r\n\r\n    /**\r\n     * Instantiates a new sky material.\r\n     * This material allows to create dynamic and texture free\r\n     * effects for skyboxes by taking care of the atmosphere state.\r\n     * @see https://doc.babylonjs.com/toolsAndResources/assetLibraries/materialsLibrary/skyMat\r\n     * @param name Define the name of the material in the scene\r\n     * @param scene Define the scene the material belong to\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material will require alpha blending\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0;\r\n    }\r\n\r\n    /**\r\n     * Specifies if this material should be rendered in alpha test mode\r\n     * @returns false as the sky material doesn't need alpha testing.\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get the texture used for alpha test purpose.\r\n     * @returns null as the sky material has no texture.\r\n     */\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get if the submesh is ready to be used and all its information available.\r\n     * Child classes can use it to update shaders\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new SkyMaterialDefines();\r\n        }\r\n\r\n        const defines = <SkyMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, false, defines);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, false);\r\n\r\n        if (defines.IMAGEPROCESSINGPOSTPROCESS !== scene.imageProcessingConfiguration.applyByPostProcess) {\r\n            defines.markAsMiscDirty();\r\n        }\r\n\r\n        if (defines.DITHER !== this.dithering) {\r\n            defines.markAsMiscDirty();\r\n        }\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n            defines.DITHER = this.dithering;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            const shaderName = \"sky\";\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"view\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"luminance\",\r\n                \"turbidity\",\r\n                \"rayleigh\",\r\n                \"mieCoefficient\",\r\n                \"mieDirectionalG\",\r\n                \"sunPosition\",\r\n                \"cameraPosition\",\r\n                \"cameraOffset\",\r\n                \"up\",\r\n            ];\r\n            addClipPlaneUniforms(uniforms);\r\n            const join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName, attribs, uniforms, [], join, fallbacks, this.onCompiled, this.onError), defines, this._materialContext);\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to this material by preparing the effect and shader to draw\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <SkyMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            bindClipPlane(effect, this, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        // Sky\r\n        const camera = scene.activeCamera;\r\n        if (camera) {\r\n            const cameraWorldMatrix = camera.getWorldMatrix();\r\n            this._cameraPosition.x = cameraWorldMatrix.m[12];\r\n            this._cameraPosition.y = cameraWorldMatrix.m[13];\r\n            this._cameraPosition.z = cameraWorldMatrix.m[14];\r\n            this._activeEffect.setVector3(\"cameraPosition\", this._cameraPosition);\r\n        }\r\n\r\n        this._activeEffect.setVector3(\"cameraOffset\", this.cameraOffset);\r\n\r\n        this._activeEffect.setVector3(\"up\", this.up);\r\n\r\n        if (this.luminance > 0) {\r\n            this._activeEffect.setFloat(\"luminance\", this.luminance);\r\n        }\r\n\r\n        this._activeEffect.setFloat(\"turbidity\", this.turbidity);\r\n        this._activeEffect.setFloat(\"rayleigh\", this.rayleigh);\r\n        this._activeEffect.setFloat(\"mieCoefficient\", this.mieCoefficient);\r\n        this._activeEffect.setFloat(\"mieDirectionalG\", this.mieDirectionalG);\r\n\r\n        if (!this.useSunPosition) {\r\n            const theta = Math.PI * (this.inclination - 0.5);\r\n            const phi = 2 * Math.PI * (this.azimuth - 0.5);\r\n\r\n            this.sunPosition.x = this.distance * Math.cos(phi) * Math.cos(theta);\r\n            this.sunPosition.y = this.distance * Math.sin(-theta);\r\n            this.sunPosition.z = this.distance * Math.sin(phi) * Math.cos(theta);\r\n\r\n            Quaternion.FromUnitVectorsToRef(Vector3.UpReadOnly, this.up, this._skyOrientation);\r\n            this.sunPosition.rotateByQuaternionToRef(this._skyOrientation, this.sunPosition);\r\n        }\r\n\r\n        this._activeEffect.setVector3(\"sunPosition\", this.sunPosition);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @returns the cloned material\r\n     */\r\n    public clone(name: string): SkyMaterial {\r\n        return SerializationHelper.Clone<SkyMaterial>(() => new SkyMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    /**\r\n     * Serializes this material in a JSON representation\r\n     * @returns the serialized material object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.SkyMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"SkyMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"SkyMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Creates a sky material from parsed material data\r\n     * @param source defines the JSON representation of the material\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a new sky material\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): SkyMaterial {\r\n        return SerializationHelper.Parse(() => new SkyMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SkyMaterial\", SkyMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/helperFunctions\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"core/Shaders/ShadersInclude/depthPrePass\";\nimport \"core/Shaders/ShadersInclude/lightFragment\";\nimport \"core/Shaders/ShadersInclude/fogFragment\";\nimport \"core/Shaders/ShadersInclude/imageProcessingCompatibility\";\n\nconst name = \"terrainPixelShader\";\nconst shader = `precision highp float;\runiform vec4 vEyePosition;\runiform vec4 vDiffuseColor;\r#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\r#endif\nvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nvarying vec4 vColor;\r#endif\n#include<helperFunctions>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;\runiform sampler2D textureSampler;\runiform vec2 vTextureInfos;\runiform sampler2D diffuse1Sampler;\runiform sampler2D diffuse2Sampler;\runiform sampler2D diffuse3Sampler;\runiform vec2 diffuse1Infos;\runiform vec2 diffuse2Infos;\runiform vec2 diffuse3Infos;\r#endif\n#ifdef BUMP\nuniform sampler2D bump1Sampler;\runiform sampler2D bump2Sampler;\runiform sampler2D bump3Sampler;\r#endif\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n#include<fogFragmentDeclaration>\n#ifdef BUMP\n#extension GL_OES_standard_derivatives : enable\nmat3 cotangent_frame(vec3 normal,vec3 p,vec2 uv)\r{\rvec3 dp1=dFdx(p);\rvec3 dp2=dFdy(p);\rvec2 duv1=dFdx(uv);\rvec2 duv2=dFdy(uv);\rvec3 dp2perp=cross(dp2,normal);\rvec3 dp1perp=cross(normal,dp1);\rvec3 tangent=dp2perp*duv1.x+dp1perp*duv2.x;\rvec3 binormal=dp2perp*duv1.y+dp1perp*duv2.y;\rfloat invmax=inversesqrt(max(dot(tangent,tangent),dot(binormal,binormal)));\rreturn mat3(tangent*invmax,binormal*invmax,normal);\r}\rvec3 perturbNormal(vec3 viewDir,vec3 mixColor)\r{\rvec3 bump1Color=texture2D(bump1Sampler,vTextureUV*diffuse1Infos).xyz;\rvec3 bump2Color=texture2D(bump2Sampler,vTextureUV*diffuse2Infos).xyz;\rvec3 bump3Color=texture2D(bump3Sampler,vTextureUV*diffuse3Infos).xyz;\rbump1Color.rgb*=mixColor.r;\rbump2Color.rgb=mix(bump1Color.rgb,bump2Color.rgb,mixColor.g);\rvec3 map=mix(bump2Color.rgb,bump3Color.rgb,mixColor.b);\rmap=map*255./127.-128./127.;\rmat3 TBN=cotangent_frame(vNormalW*vTextureInfos.y,-viewDir,vTextureUV);\rreturn normalize(TBN*map);\r}\r#endif\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);\rvec4 baseColor=vec4(1.,1.,1.,1.);\rvec3 diffuseColor=vDiffuseColor.rgb;\r#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\rvec3 specularColor=vSpecularColor.rgb;\r#else\nfloat glossiness=0.;\r#endif\nfloat alpha=vDiffuseColor.a;\r#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\r#else\nvec3 normalW=vec3(1.0,1.0,1.0);\r#endif\n#ifdef DIFFUSE\nbaseColor=texture2D(textureSampler,vTextureUV);\r#if defined(BUMP) && defined(DIFFUSE)\nnormalW=perturbNormal(viewDirectionW,baseColor.rgb);\r#endif\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\rdiscard;\r#endif\n#include<depthPrePass>\nbaseColor.rgb*=vTextureInfos.y;\rvec4 diffuse1Color=texture2D(diffuse1Sampler,vTextureUV*diffuse1Infos);\rvec4 diffuse2Color=texture2D(diffuse2Sampler,vTextureUV*diffuse2Infos);\rvec4 diffuse3Color=texture2D(diffuse3Sampler,vTextureUV*diffuse3Infos);\rdiffuse1Color.rgb*=baseColor.r;\rdiffuse2Color.rgb=mix(diffuse1Color.rgb,diffuse2Color.rgb,baseColor.g);\rbaseColor.rgb=mix(diffuse2Color.rgb,diffuse3Color.rgb,baseColor.b);\r#endif\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nbaseColor.rgb*=vColor.rgb;\r#endif\nvec3 diffuseBase=vec3(0.,0.,0.);\rlightingInfo info;\rfloat shadow=1.;\r#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\r#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#if defined(VERTEXALPHA) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nalpha*=vColor.a;\r#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\r#else\nvec3 finalSpecular=vec3(0.0);\r#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor*baseColor.rgb,0.0,1.0);\rvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\r#include<fogFragment>\ngl_FragColor=color;\r#include<imageProcessingCompatibility>\n#define CUSTOM_FRAGMENT_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const terrainPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesVertex\";\nimport \"core/Shaders/ShadersInclude/bonesVertex\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimation\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"core/Shaders/ShadersInclude/fogVertex\";\nimport \"core/Shaders/ShadersInclude/shadowsVertex\";\nimport \"core/Shaders/ShadersInclude/vertexColorMixing\";\n\nconst name = \"terrainVertexShader\";\nconst shader = `precision highp float;attribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<instancesDeclaration>\nuniform mat4 view;uniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;uniform mat4 textureMatrix;uniform vec2 vTextureInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_VERTEX_MAIN_BEGIN\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(position,1.0);gl_Position=viewProjection*worldPos;vPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vTextureInfos.x==0.)\n{vTextureUV=vec2(textureMatrix*vec4(uv,1.0,0.0));}\nelse\n{vTextureUV=vec2(textureMatrix*vec4(uv2,1.0,0.0));}\n#endif\n#include<clipPlaneVertex>\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n#include<vertexColorMixing>\n#if defined(POINTSIZE) && !defined(WEBGPU)\ngl_PointSize=pointSize;\n#endif\n#define CUSTOM_VERTEX_MAIN_END\n}\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const terrainVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\nimport \"./terrain.fragment\";\r\nimport \"./terrain.vertex\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\r\n\r\nclass TerrainMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public BUMP = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class TerrainMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"mixTexture\")\r\n    private _mixTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public mixTexture: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture1\")\r\n    private _diffuseTexture1: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture1: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture2\")\r\n    private _diffuseTexture2: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture2: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture3\")\r\n    private _diffuseTexture3: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture3: Texture;\r\n\r\n    @serializeAsTexture(\"bumpTexture1\")\r\n    private _bumpTexture1: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture1: Texture;\r\n\r\n    @serializeAsTexture(\"bumpTexture2\")\r\n    private _bumpTexture2: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture2: Texture;\r\n\r\n    @serializeAsTexture(\"bumpTexture3\")\r\n    private _bumpTexture3: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture3: Texture;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serializeAsColor3()\r\n    public specularColor = new Color3(0, 0, 0);\r\n\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new TerrainMaterialDefines();\r\n        }\r\n\r\n        const defines = <TerrainMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (!this.mixTexture || !this.mixTexture.isReady()) {\r\n                return false;\r\n            }\r\n\r\n            defines._needUVs = true;\r\n\r\n            if (MaterialFlags.DiffuseTextureEnabled) {\r\n                if (!this.diffuseTexture1 || !this.diffuseTexture1.isReady()) {\r\n                    return false;\r\n                }\r\n                if (!this.diffuseTexture2 || !this.diffuseTexture2.isReady()) {\r\n                    return false;\r\n                }\r\n                if (!this.diffuseTexture3 || !this.diffuseTexture3.isReady()) {\r\n                    return false;\r\n                }\r\n\r\n                defines.DIFFUSE = true;\r\n            }\r\n\r\n            if (this.bumpTexture1 && this.bumpTexture2 && this.bumpTexture3 && MaterialFlags.BumpTextureEnabled) {\r\n                if (!this.bumpTexture1.isReady()) {\r\n                    return false;\r\n                }\r\n                if (!this.bumpTexture2.isReady()) {\r\n                    return false;\r\n                }\r\n                if (!this.bumpTexture3.isReady()) {\r\n                    return false;\r\n                }\r\n\r\n                defines._needNormals = true;\r\n                defines.BUMP = true;\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"terrain\";\r\n            const join = defines.toString();\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vLightsType\",\r\n                \"vDiffuseColor\",\r\n                \"vSpecularColor\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"vTextureInfos\",\r\n                \"mBones\",\r\n                \"textureMatrix\",\r\n                \"diffuse1Infos\",\r\n                \"diffuse2Infos\",\r\n                \"diffuse3Infos\",\r\n            ];\r\n            const samplers = [\"textureSampler\", \"diffuse1Sampler\", \"diffuse2Sampler\", \"diffuse3Sampler\", \"bump1Sampler\", \"bump2Sampler\", \"bump3Sampler\"];\r\n\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            addClipPlaneUniforms(uniforms);\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <TerrainMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this.mixTexture) {\r\n                this._activeEffect.setTexture(\"textureSampler\", this._mixTexture);\r\n                this._activeEffect.setFloat2(\"vTextureInfos\", this._mixTexture.coordinatesIndex, this._mixTexture.level);\r\n                this._activeEffect.setMatrix(\"textureMatrix\", this._mixTexture.getTextureMatrix());\r\n\r\n                if (MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (this._diffuseTexture1) {\r\n                        this._activeEffect.setTexture(\"diffuse1Sampler\", this._diffuseTexture1);\r\n                        this._activeEffect.setFloat2(\"diffuse1Infos\", this._diffuseTexture1.uScale, this._diffuseTexture1.vScale);\r\n                    }\r\n                    if (this._diffuseTexture2) {\r\n                        this._activeEffect.setTexture(\"diffuse2Sampler\", this._diffuseTexture2);\r\n                        this._activeEffect.setFloat2(\"diffuse2Infos\", this._diffuseTexture2.uScale, this._diffuseTexture2.vScale);\r\n                    }\r\n                    if (this._diffuseTexture3) {\r\n                        this._activeEffect.setTexture(\"diffuse3Sampler\", this._diffuseTexture3);\r\n                        this._activeEffect.setFloat2(\"diffuse3Infos\", this._diffuseTexture3.uScale, this._diffuseTexture3.vScale);\r\n                    }\r\n                }\r\n\r\n                if (MaterialFlags.BumpTextureEnabled && scene.getEngine().getCaps().standardDerivatives) {\r\n                    if (this._bumpTexture1) {\r\n                        this._activeEffect.setTexture(\"bump1Sampler\", this._bumpTexture1);\r\n                    }\r\n                    if (this._bumpTexture2) {\r\n                        this._activeEffect.setTexture(\"bump2Sampler\", this._bumpTexture2);\r\n                    }\r\n                    if (this._bumpTexture3) {\r\n                        this._activeEffect.setTexture(\"bump3Sampler\", this._bumpTexture3);\r\n                    }\r\n                }\r\n            }\r\n            // Clip plane\r\n            bindClipPlane(effect, this, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            scene.bindEyePosition(effect);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = [];\r\n\r\n        if (this.mixTexture && this.mixTexture.animations && this.mixTexture.animations.length > 0) {\r\n            results.push(this.mixTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._mixTexture) {\r\n            activeTextures.push(this._mixTexture);\r\n        }\r\n\r\n        if (this._diffuseTexture1) {\r\n            activeTextures.push(this._diffuseTexture1);\r\n        }\r\n\r\n        if (this._diffuseTexture2) {\r\n            activeTextures.push(this._diffuseTexture2);\r\n        }\r\n\r\n        if (this._diffuseTexture3) {\r\n            activeTextures.push(this._diffuseTexture3);\r\n        }\r\n\r\n        if (this._bumpTexture1) {\r\n            activeTextures.push(this._bumpTexture1);\r\n        }\r\n\r\n        if (this._bumpTexture2) {\r\n            activeTextures.push(this._bumpTexture2);\r\n        }\r\n\r\n        if (this._bumpTexture3) {\r\n            activeTextures.push(this._bumpTexture3);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._mixTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture3 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture3 === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.mixTexture) {\r\n            this.mixTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): TerrainMaterial {\r\n        return SerializationHelper.Clone(() => new TerrainMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.TerrainMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"TerrainMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): TerrainMaterial {\r\n        return SerializationHelper.Parse(() => new TerrainMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.TerrainMaterial\", TerrainMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/helperFunctions\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"core/Shaders/ShadersInclude/depthPrePass\";\nimport \"core/Shaders/ShadersInclude/lightFragment\";\nimport \"core/Shaders/ShadersInclude/fogFragment\";\nimport \"core/Shaders/ShadersInclude/imageProcessingCompatibility\";\n\nconst name = \"triplanarPixelShader\";\nconst shader = `precision highp float;\runiform vec4 vEyePosition;\runiform vec4 vDiffuseColor;\r#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\r#endif\nvarying vec3 vPositionW;\r#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nvarying vec4 vColor;\r#endif\n#include<helperFunctions>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#ifdef DIFFUSEX\nvarying vec2 vTextureUVX;\runiform sampler2D diffuseSamplerX;\r#ifdef BUMPX\nuniform sampler2D normalSamplerX;\r#endif\n#endif\n#ifdef DIFFUSEY\nvarying vec2 vTextureUVY;\runiform sampler2D diffuseSamplerY;\r#ifdef BUMPY\nuniform sampler2D normalSamplerY;\r#endif\n#endif\n#ifdef DIFFUSEZ\nvarying vec2 vTextureUVZ;\runiform sampler2D diffuseSamplerZ;\r#ifdef BUMPZ\nuniform sampler2D normalSamplerZ;\r#endif\n#endif\n#ifdef NORMAL\nvarying mat3 tangentSpace;\r#endif\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n#include<fogFragmentDeclaration>\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);\rvec4 baseColor=vec4(0.,0.,0.,1.);\rvec3 diffuseColor=vDiffuseColor.rgb;\rfloat alpha=vDiffuseColor.a;\r#ifdef NORMAL\nvec3 normalW=tangentSpace[2];\r#else\nvec3 normalW=vec3(1.0,1.0,1.0);\r#endif\nvec4 baseNormal=vec4(0.0,0.0,0.0,1.0);\rnormalW*=normalW;\r#ifdef DIFFUSEX\nbaseColor+=texture2D(diffuseSamplerX,vTextureUVX)*normalW.x;\r#ifdef BUMPX\nbaseNormal+=texture2D(normalSamplerX,vTextureUVX)*normalW.x;\r#endif\n#endif\n#ifdef DIFFUSEY\nbaseColor+=texture2D(diffuseSamplerY,vTextureUVY)*normalW.y;\r#ifdef BUMPY\nbaseNormal+=texture2D(normalSamplerY,vTextureUVY)*normalW.y;\r#endif\n#endif\n#ifdef DIFFUSEZ\nbaseColor+=texture2D(diffuseSamplerZ,vTextureUVZ)*normalW.z;\r#ifdef BUMPZ\nbaseNormal+=texture2D(normalSamplerZ,vTextureUVZ)*normalW.z;\r#endif\n#endif\n#ifdef NORMAL\nnormalW=normalize((2.0*baseNormal.xyz-1.0)*tangentSpace);\r#endif\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\rdiscard;\r#endif\n#include<depthPrePass>\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nbaseColor.rgb*=vColor.rgb;\r#endif\nvec3 diffuseBase=vec3(0.,0.,0.);\rlightingInfo info;\rfloat shadow=1.;\r#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\rvec3 specularBase=vec3(0.,0.,0.);\rvec3 specularColor=vSpecularColor.rgb;\r#else\nfloat glossiness=0.;\r#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#if defined(VERTEXALPHA) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nalpha*=vColor.a;\r#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\r#else\nvec3 finalSpecular=vec3(0.0);\r#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\rvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\r#include<fogFragment>\ngl_FragColor=color;\r#include<imageProcessingCompatibility>\n#define CUSTOM_FRAGMENT_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const triplanarPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/helperFunctions\";\nimport \"core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesVertex\";\nimport \"core/Shaders/ShadersInclude/bonesVertex\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimation\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"core/Shaders/ShadersInclude/fogVertex\";\nimport \"core/Shaders/ShadersInclude/shadowsVertex\";\nimport \"core/Shaders/ShadersInclude/vertexColorMixing\";\n\nconst name = \"triplanarVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\r#ifdef NORMAL\nattribute vec3 normal;\r#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\r#endif\n#include<helperFunctions>\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<instancesDeclaration>\nuniform mat4 view;\runiform mat4 viewProjection;\r#ifdef DIFFUSEX\nvarying vec2 vTextureUVX;\r#endif\n#ifdef DIFFUSEY\nvarying vec2 vTextureUVY;\r#endif\n#ifdef DIFFUSEZ\nvarying vec2 vTextureUVZ;\r#endif\nuniform float tileSize;\r#ifdef POINTSIZE\nuniform float pointSize;\r#endif\nvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying mat3 tangentSpace;\r#endif\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nvarying vec4 vColor;\r#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void)\r{\r#define CUSTOM_VERTEX_MAIN_BEGIN\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(position,1.0);\rgl_Position=viewProjection*worldPos;\rvPositionW=vec3(worldPos);\r#ifdef DIFFUSEX\nvTextureUVX=worldPos.zy/tileSize;\r#endif\n#ifdef DIFFUSEY\nvTextureUVY=worldPos.xz/tileSize;\r#endif\n#ifdef DIFFUSEZ\nvTextureUVZ=worldPos.xy/tileSize;\r#endif\n#ifdef NORMAL\nvec3 xtan=vec3(0,0,1);\rvec3 xbin=vec3(0,1,0);\rvec3 ytan=vec3(1,0,0);\rvec3 ybin=vec3(0,0,1);\rvec3 ztan=vec3(1,0,0);\rvec3 zbin=vec3(0,1,0);\rvec3 normalizedNormal=normalize(normal);\rnormalizedNormal*=normalizedNormal;\rvec3 worldBinormal=normalize(xbin*normalizedNormal.x+ybin*normalizedNormal.y+zbin*normalizedNormal.z);\rvec3 worldTangent=normalize(xtan*normalizedNormal.x+ytan*normalizedNormal.y+ztan*normalizedNormal.z);\rmat3 normalWorld=mat3(world);\r#ifdef NONUNIFORMSCALING\nnormalWorld=transposeMat3(inverseMat3(normalWorld));\r#endif\nworldTangent=normalize((normalWorld*worldTangent).xyz);\rworldBinormal=normalize((normalWorld*worldBinormal).xyz);\rvec3 worldNormal=normalize((normalWorld*normalize(normal)).xyz);\rtangentSpace[0]=worldTangent;\rtangentSpace[1]=worldBinormal;\rtangentSpace[2]=worldNormal;\r#endif\n#include<clipPlaneVertex>\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n#include<vertexColorMixing>\n#if defined(POINTSIZE) && !defined(WEBGPU)\ngl_PointSize=pointSize;\r#endif\n#define CUSTOM_VERTEX_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const triplanarVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\n\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\nimport \"./triplanar.fragment\";\r\nimport \"./triplanar.vertex\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\r\n\r\nclass TriPlanarMaterialDefines extends MaterialDefines {\r\n    public DIFFUSEX = false;\r\n    public DIFFUSEY = false;\r\n    public DIFFUSEZ = false;\r\n\r\n    public BUMPX = false;\r\n    public BUMPY = false;\r\n    public BUMPZ = false;\r\n\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public NORMAL = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n    public NONUNIFORMSCALING = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class TriPlanarMaterial extends PushMaterial {\r\n    @serializeAsTexture()\r\n    public mixTexture: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTextureX\")\r\n    private _diffuseTextureX: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTextureX: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTexturY\")\r\n    private _diffuseTextureY: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTextureY: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTextureZ\")\r\n    private _diffuseTextureZ: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTextureZ: BaseTexture;\r\n\r\n    @serializeAsTexture(\"normalTextureX\")\r\n    private _normalTextureX: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalTextureX: BaseTexture;\r\n\r\n    @serializeAsTexture(\"normalTextureY\")\r\n    private _normalTextureY: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalTextureY: BaseTexture;\r\n\r\n    @serializeAsTexture(\"normalTextureZ\")\r\n    private _normalTextureZ: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalTextureZ: BaseTexture;\r\n\r\n    @serialize()\r\n    public tileSize: number = 1;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serializeAsColor3()\r\n    public specularColor = new Color3(0.2, 0.2, 0.2);\r\n\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new TriPlanarMaterialDefines();\r\n        }\r\n\r\n        const defines = <TriPlanarMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (MaterialFlags.DiffuseTextureEnabled) {\r\n                    const textures = [this.diffuseTextureX, this.diffuseTextureY, this.diffuseTextureZ];\r\n                    const textureDefines = [\"DIFFUSEX\", \"DIFFUSEY\", \"DIFFUSEZ\"];\r\n\r\n                    for (let i = 0; i < textures.length; i++) {\r\n                        if (textures[i]) {\r\n                            if (!textures[i].isReady()) {\r\n                                return false;\r\n                            } else {\r\n                                (<any>defines)[textureDefines[i]] = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (MaterialFlags.BumpTextureEnabled) {\r\n                    const textures = [this.normalTextureX, this.normalTextureY, this.normalTextureZ];\r\n                    const textureDefines = [\"BUMPX\", \"BUMPY\", \"BUMPZ\"];\r\n\r\n                    for (let i = 0; i < textures.length; i++) {\r\n                        if (textures[i]) {\r\n                            if (!textures[i].isReady()) {\r\n                                return false;\r\n                            } else {\r\n                                (<any>defines)[textureDefines[i]] = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"triplanar\";\r\n            const join = defines.toString();\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vLightsType\",\r\n                \"vDiffuseColor\",\r\n                \"vSpecularColor\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"mBones\",\r\n                \"tileSize\",\r\n            ];\r\n            const samplers = [\"diffuseSamplerX\", \"diffuseSamplerY\", \"diffuseSamplerZ\", \"normalSamplerX\", \"normalSamplerY\", \"normalSamplerZ\"];\r\n\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            addClipPlaneUniforms(uniforms);\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <TriPlanarMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        this._activeEffect.setFloat(\"tileSize\", this.tileSize);\r\n\r\n        if (scene.getCachedMaterial() !== this) {\r\n            // Textures\r\n            if (this.diffuseTextureX) {\r\n                this._activeEffect.setTexture(\"diffuseSamplerX\", this.diffuseTextureX);\r\n            }\r\n            if (this.diffuseTextureY) {\r\n                this._activeEffect.setTexture(\"diffuseSamplerY\", this.diffuseTextureY);\r\n            }\r\n            if (this.diffuseTextureZ) {\r\n                this._activeEffect.setTexture(\"diffuseSamplerZ\", this.diffuseTextureZ);\r\n            }\r\n            if (this.normalTextureX) {\r\n                this._activeEffect.setTexture(\"normalSamplerX\", this.normalTextureX);\r\n            }\r\n            if (this.normalTextureY) {\r\n                this._activeEffect.setTexture(\"normalSamplerY\", this.normalTextureY);\r\n            }\r\n            if (this.normalTextureZ) {\r\n                this._activeEffect.setTexture(\"normalSamplerZ\", this.normalTextureZ);\r\n            }\r\n            // Clip plane\r\n            bindClipPlane(effect, this, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            scene.bindEyePosition(effect);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = [];\r\n\r\n        if (this.mixTexture && this.mixTexture.animations && this.mixTexture.animations.length > 0) {\r\n            results.push(this.mixTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTextureX) {\r\n            activeTextures.push(this._diffuseTextureX);\r\n        }\r\n\r\n        if (this._diffuseTextureY) {\r\n            activeTextures.push(this._diffuseTextureY);\r\n        }\r\n\r\n        if (this._diffuseTextureZ) {\r\n            activeTextures.push(this._diffuseTextureZ);\r\n        }\r\n\r\n        if (this._normalTextureX) {\r\n            activeTextures.push(this._normalTextureX);\r\n        }\r\n\r\n        if (this._normalTextureY) {\r\n            activeTextures.push(this._normalTextureY);\r\n        }\r\n\r\n        if (this._normalTextureZ) {\r\n            activeTextures.push(this._normalTextureZ);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTextureX === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTextureY === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTextureZ === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._normalTextureX === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._normalTextureY === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._normalTextureZ === texture) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.mixTexture) {\r\n            this.mixTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): TriPlanarMaterial {\r\n        return SerializationHelper.Clone(() => new TriPlanarMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.TriPlanarMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"TriPlanarMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): TriPlanarMaterial {\r\n        return SerializationHelper.Parse(() => new TriPlanarMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.TriPlanarMaterial\", TriPlanarMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/helperFunctions\";\nimport \"core/Shaders/ShadersInclude/imageProcessingDeclaration\";\nimport \"core/Shaders/ShadersInclude/imageProcessingFunctions\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/shadowsFragmentFunctions\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/logDepthDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneFragment\";\nimport \"core/Shaders/ShadersInclude/lightFragment\";\nimport \"core/Shaders/ShadersInclude/logDepthFragment\";\nimport \"core/Shaders/ShadersInclude/fogFragment\";\n\nconst name = \"waterPixelShader\";\nconst shader = `#ifdef LOGARITHMICDEPTH\n#extension GL_EXT_frag_depth : enable\n#endif\nprecision highp float;\runiform vec4 vEyePosition;\runiform vec4 vDiffuseColor;\r#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\r#endif\nvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nvarying vec4 vColor;\r#endif\n#include<helperFunctions>\n#include<imageProcessingDeclaration>\n#include<imageProcessingFunctions>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#ifdef BUMP\nvarying vec2 vNormalUV;\r#ifdef BUMPSUPERIMPOSE\nvarying vec2 vNormalUV2;\r#endif\nuniform sampler2D normalSampler;\runiform vec2 vNormalInfos;\r#endif\nuniform sampler2D refractionSampler;\runiform sampler2D reflectionSampler;\rconst float LOG2=1.442695;\runiform vec3 cameraPosition;\runiform vec4 waterColor;\runiform float colorBlendFactor;\runiform vec4 waterColor2;\runiform float colorBlendFactor2;\runiform float bumpHeight;\runiform float time;\rvarying vec3 vRefractionMapTexCoord;\rvarying vec3 vReflectionMapTexCoord;\r#include<clipPlaneFragmentDeclaration>\n#include<logDepthDeclaration>\n#include<fogFragmentDeclaration>\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);\rvec4 baseColor=vec4(1.,1.,1.,1.);\rvec3 diffuseColor=vDiffuseColor.rgb;\rfloat alpha=vDiffuseColor.a;\r#ifdef BUMP\n#ifdef BUMPSUPERIMPOSE\nbaseColor=0.6*texture2D(normalSampler,vNormalUV)+0.4*texture2D(normalSampler,vec2(vNormalUV2.x,vNormalUV2.y));\r#else\nbaseColor=texture2D(normalSampler,vNormalUV);\r#endif\nvec3 bumpColor=baseColor.rgb;\r#ifdef ALPHATEST\nif (baseColor.a<0.4)\rdiscard;\r#endif\nbaseColor.rgb*=vNormalInfos.y;\r#else\nvec3 bumpColor=vec3(1.0);\r#endif\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nbaseColor.rgb*=vColor.rgb;\r#endif\n#ifdef NORMAL\nvec2 perturbation=bumpHeight*(baseColor.rg-0.5);\r#ifdef BUMPAFFECTSREFLECTION\nvec3 normalW=normalize(vNormalW+vec3(perturbation.x*8.0,0.0,perturbation.y*8.0));\rif (normalW.y<0.0) {\rnormalW.y=-normalW.y;\r}\r#else\nvec3 normalW=normalize(vNormalW);\r#endif\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\rvec2 perturbation=bumpHeight*(vec2(1.0,1.0)-0.5);\r#endif\n#ifdef FRESNELSEPARATE\n#ifdef REFLECTION\nvec2 projectedRefractionTexCoords=clamp(vRefractionMapTexCoord.xy/vRefractionMapTexCoord.z+perturbation*0.5,0.0,1.0);\rvec4 refractiveColor=texture2D(refractionSampler,projectedRefractionTexCoords);\r#ifdef IS_REFRACTION_LINEAR\nrefractiveColor.rgb=toGammaSpace(refractiveColor.rgb);\r#endif\nvec2 projectedReflectionTexCoords=clamp(vec2(\rvReflectionMapTexCoord.x/vReflectionMapTexCoord.z+perturbation.x*0.3,\rvReflectionMapTexCoord.y/vReflectionMapTexCoord.z+perturbation.y\r),0.0,1.0);\rvec4 reflectiveColor=texture2D(reflectionSampler,projectedReflectionTexCoords);\r#ifdef IS_REFLECTION_LINEAR\nreflectiveColor.rgb=toGammaSpace(reflectiveColor.rgb);\r#endif\nvec3 upVector=vec3(0.0,1.0,0.0);\rfloat fresnelTerm=clamp(abs(pow(dot(viewDirectionW,upVector),3.0)),0.05,0.65);\rfloat IfresnelTerm=1.0-fresnelTerm;\rrefractiveColor=colorBlendFactor*waterColor+(1.0-colorBlendFactor)*refractiveColor;\rreflectiveColor=IfresnelTerm*colorBlendFactor2*waterColor+(1.0-colorBlendFactor2*IfresnelTerm)*reflectiveColor;\rvec4 combinedColor=refractiveColor*fresnelTerm+reflectiveColor*IfresnelTerm;\rbaseColor=combinedColor;\r#endif\nvec3 diffuseBase=vec3(0.,0.,0.);\rlightingInfo info;\rfloat shadow=1.;\r#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\rvec3 specularBase=vec3(0.,0.,0.);\rvec3 specularColor=vSpecularColor.rgb;\r#else\nfloat glossiness=0.;\r#endif\n#include<lightFragment>[0..maxSimultaneousLights]\nvec3 finalDiffuse=clamp(baseColor.rgb,0.0,1.0);\r#if defined(VERTEXALPHA) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nalpha*=vColor.a;\r#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\r#else\nvec3 finalSpecular=vec3(0.0);\r#endif\n#else \n#ifdef REFLECTION\nvec2 projectedRefractionTexCoords=clamp(vRefractionMapTexCoord.xy/vRefractionMapTexCoord.z+perturbation,0.0,1.0);\rvec4 refractiveColor=texture2D(refractionSampler,projectedRefractionTexCoords);\r#ifdef IS_REFRACTION_LINEAR\nrefractiveColor.rgb=toGammaSpace(refractiveColor.rgb);\r#endif\nvec2 projectedReflectionTexCoords=clamp(vReflectionMapTexCoord.xy/vReflectionMapTexCoord.z+perturbation,0.0,1.0);\rvec4 reflectiveColor=texture2D(reflectionSampler,projectedReflectionTexCoords);\r#ifdef IS_REFLECTION_LINEAR\nreflectiveColor.rgb=toGammaSpace(reflectiveColor.rgb);\r#endif\nvec3 upVector=vec3(0.0,1.0,0.0);\rfloat fresnelTerm=max(dot(viewDirectionW,upVector),0.0);\rvec4 combinedColor=refractiveColor*fresnelTerm+reflectiveColor*(1.0-fresnelTerm);\rbaseColor=colorBlendFactor*waterColor+(1.0-colorBlendFactor)*combinedColor;\r#endif\nvec3 diffuseBase=vec3(0.,0.,0.);\rlightingInfo info;\rfloat shadow=1.;\r#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\rvec3 specularBase=vec3(0.,0.,0.);\rvec3 specularColor=vSpecularColor.rgb;\r#else\nfloat glossiness=0.;\r#endif\n#include<lightFragment>[0..maxSimultaneousLights]\nvec3 finalDiffuse=clamp(baseColor.rgb,0.0,1.0);\r#if defined(VERTEXALPHA) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nalpha*=vColor.a;\r#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\r#else\nvec3 finalSpecular=vec3(0.0);\r#endif\n#endif\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\r#include<logDepthFragment>\n#include<fogFragment>\n#ifdef IMAGEPROCESSINGPOSTPROCESS\ncolor.rgb=toLinearSpace(color.rgb);\r#elif defined(IMAGEPROCESSING)\ncolor.rgb=toLinearSpace(color.rgb);\rcolor=applyImageProcessing(color);\r#endif\ngl_FragColor=color;\r#define CUSTOM_FRAGMENT_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const waterPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\nimport \"core/Shaders/ShadersInclude/bonesDeclaration\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesDeclaration\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/fogVertexDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightFragmentDeclaration\";\nimport \"core/Shaders/ShadersInclude/lightUboDeclaration\";\nimport \"core/Shaders/ShadersInclude/logDepthDeclaration\";\nimport \"core/Shaders/ShadersInclude/instancesVertex\";\nimport \"core/Shaders/ShadersInclude/bonesVertex\";\nimport \"core/Shaders/ShadersInclude/bakedVertexAnimation\";\nimport \"core/Shaders/ShadersInclude/clipPlaneVertex\";\nimport \"core/Shaders/ShadersInclude/fogVertex\";\nimport \"core/Shaders/ShadersInclude/shadowsVertex\";\nimport \"core/Shaders/ShadersInclude/vertexColorMixing\";\nimport \"core/Shaders/ShadersInclude/logDepthVertex\";\n\nconst name = \"waterVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\r#ifdef NORMAL\nattribute vec3 normal;\r#endif\n#ifdef UV1\nattribute vec2 uv;\r#endif\n#ifdef UV2\nattribute vec2 uv2;\r#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\r#endif\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<instancesDeclaration>\nuniform mat4 view;\runiform mat4 viewProjection;\r#ifdef BUMP\nvarying vec2 vNormalUV;\r#ifdef BUMPSUPERIMPOSE\nvarying vec2 vNormalUV2;\r#endif\nuniform mat4 normalMatrix;\runiform vec2 vNormalInfos;\r#endif\n#ifdef POINTSIZE\nuniform float pointSize;\r#endif\nvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nvarying vec4 vColor;\r#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<logDepthDeclaration>\nuniform mat4 reflectionViewProjection;\runiform vec2 windDirection;\runiform float waveLength;\runiform float time;\runiform float windForce;\runiform float waveHeight;\runiform float waveSpeed;\runiform float waveCount;\rvarying vec3 vRefractionMapTexCoord;\rvarying vec3 vReflectionMapTexCoord;\r#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_VERTEX_MAIN_BEGIN\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(position,1.0);\rvPositionW=vec3(worldPos);\r#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\r#endif\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\r#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\r#endif\n#ifdef BUMP\nif (vNormalInfos.x==0.)\r{\rvNormalUV=vec2(normalMatrix*vec4((uv*1.0)/waveLength+time*windForce*windDirection,1.0,0.0));\r#ifdef BUMPSUPERIMPOSE\nvNormalUV2=vec2(normalMatrix*vec4((uv*0.721)/waveLength+time*1.2*windForce*windDirection,1.0,0.0));\r#endif\n}\relse\r{\rvNormalUV=vec2(normalMatrix*vec4((uv2*1.0)/waveLength+time*windForce*windDirection ,1.0,0.0));\r#ifdef BUMPSUPERIMPOSE\nvNormalUV2=vec2(normalMatrix*vec4((uv2*0.721)/waveLength+time*1.2*windForce*windDirection ,1.0,0.0));\r#endif\n}\r#endif\n#include<clipPlaneVertex>\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n#include<vertexColorMixing>\n#if defined(POINTSIZE) && !defined(WEBGPU)\ngl_PointSize=pointSize;\r#endif\nfloat finalWaveCount=1.0/(waveCount*0.5);\r#ifdef USE_WORLD_COORDINATES\nvec3 p=worldPos.xyz;\r#else\nvec3 p=position;\r#endif\nfloat newY=(sin(((p.x/finalWaveCount)+time*waveSpeed))*waveHeight*windDirection.x*5.0)\r+ (cos(((p.z/finalWaveCount)+ time*waveSpeed))*waveHeight*windDirection.y*5.0);\rp.y+=abs(newY);\r#ifdef USE_WORLD_COORDINATES\ngl_Position=viewProjection*vec4(p,1.0);\r#else\ngl_Position=viewProjection*finalWorld*vec4(p,1.0);\r#endif\n#ifdef REFLECTION\nvRefractionMapTexCoord.x=0.5*(gl_Position.w+gl_Position.x);\rvRefractionMapTexCoord.y=0.5*(gl_Position.w+gl_Position.y);\rvRefractionMapTexCoord.z=gl_Position.w;\rworldPos=reflectionViewProjection*finalWorld*vec4(position,1.0);\rvReflectionMapTexCoord.x=0.5*(worldPos.w+worldPos.x);\rvReflectionMapTexCoord.y=0.5*(worldPos.w+worldPos.y);\rvReflectionMapTexCoord.z=worldPos.w;\r#endif\n#include<logDepthVertex>\n#define CUSTOM_VERTEX_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const waterVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsVector2, serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"core/Misc/decorators\";\r\nimport { Matrix, Vector2, Vector3 } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Plane } from \"core/Maths/math.plane\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { SmartArray } from \"core/Misc/smartArray\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { RenderTargetTexture } from \"core/Materials/Textures/renderTargetTexture\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport type { IImageProcessingConfigurationDefines } from \"core/Materials/imageProcessingConfiguration\";\r\nimport { ImageProcessingConfiguration } from \"core/Materials/imageProcessingConfiguration\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { MaterialFlags } from \"core/Materials/materialFlags\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\nimport \"./water.fragment\";\r\nimport \"./water.vertex\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { CreateGround } from \"core/Meshes/Builders/groundBuilder\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"core/Materials/clipPlaneMaterialHelper\";\r\n\r\nclass WaterMaterialDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\r\n    public BUMP = false;\r\n    public REFLECTION = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n    public SPECULARTERM = false;\r\n    public LOGARITHMICDEPTH = false;\r\n    public USE_REVERSE_DEPTHBUFFER = false;\r\n    public FRESNELSEPARATE = false;\r\n    public BUMPSUPERIMPOSE = false;\r\n    public BUMPAFFECTSREFLECTION = false;\r\n    public USE_WORLD_COORDINATES = false;\r\n\r\n    public IMAGEPROCESSING = false;\r\n    public VIGNETTE = false;\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    public TONEMAPPING = false;\r\n    public TONEMAPPING_ACES = false;\r\n    public CONTRAST = false;\r\n    public EXPOSURE = false;\r\n    public COLORCURVES = false;\r\n    public COLORGRADING = false;\r\n    public COLORGRADING3D = false;\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    public SAMPLER3DBGRMAP = false;\r\n    public DITHER = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class WaterMaterial extends PushMaterial {\r\n    /*\r\n     * Public members\r\n     */\r\n    @serializeAsTexture(\"bumpTexture\")\r\n    private _bumpTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture: BaseTexture;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serializeAsColor3()\r\n    public specularColor = new Color3(0, 0, 0);\r\n\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    /**\r\n     * Defines the wind force.\r\n     */\r\n    @serialize()\r\n    public windForce: number = 6;\r\n    /**\r\n     * Defines the direction of the wind in the plane (X, Z).\r\n     */\r\n    @serializeAsVector2()\r\n    public windDirection: Vector2 = new Vector2(0, 1);\r\n    /**\r\n     * Defines the height of the waves.\r\n     */\r\n    @serialize()\r\n    public waveHeight: number = 0.4;\r\n    /**\r\n     * Defines the bump height related to the bump map.\r\n     */\r\n    @serialize()\r\n    public bumpHeight: number = 0.4;\r\n    /**\r\n     * Defines wether or not: to add a smaller moving bump to less steady waves.\r\n     */\r\n    @serialize(\"bumpSuperimpose\")\r\n    private _bumpSuperimpose = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public bumpSuperimpose: boolean;\r\n\r\n    /**\r\n     * Defines wether or not color refraction and reflection differently with .waterColor2 and .colorBlendFactor2. Non-linear (physically correct) fresnel.\r\n     */\r\n    @serialize(\"fresnelSeparate\")\r\n    private _fresnelSeparate = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public fresnelSeparate: boolean;\r\n\r\n    /**\r\n     * Defines wether or not bump Wwves modify the reflection.\r\n     */\r\n    @serialize(\"bumpAffectsReflection\")\r\n    private _bumpAffectsReflection = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public bumpAffectsReflection: boolean;\r\n\r\n    /**\r\n     * Defines the water color blended with the refraction (near).\r\n     */\r\n    @serializeAsColor3()\r\n    public waterColor: Color3 = new Color3(0.1, 0.1, 0.6);\r\n    /**\r\n     * Defines the blend factor related to the water color.\r\n     */\r\n    @serialize()\r\n    public colorBlendFactor: number = 0.2;\r\n    /**\r\n     * Defines the water color blended with the reflection (far).\r\n     */\r\n    @serializeAsColor3()\r\n    public waterColor2: Color3 = new Color3(0.1, 0.1, 0.6);\r\n    /**\r\n     * Defines the blend factor related to the water color (reflection, far).\r\n     */\r\n    @serialize()\r\n    public colorBlendFactor2: number = 0.2;\r\n    /**\r\n     * Defines the maximum length of a wave.\r\n     */\r\n    @serialize()\r\n    public waveLength: number = 0.1;\r\n\r\n    /**\r\n     * Defines the waves speed.\r\n     */\r\n    @serialize()\r\n    public waveSpeed: number = 1.0;\r\n\r\n    /**\r\n     * Defines the number of times waves are repeated. This is typically used to adjust waves count according to the ground's size where the material is applied on.\r\n     */\r\n    @serialize()\r\n    public waveCount: number = 20;\r\n    /**\r\n     * Sets or gets whether or not automatic clipping should be enabled or not. Setting to true will save performances and\r\n     * will avoid calculating useless pixels in the pixel shader of the water material.\r\n     */\r\n    @serialize()\r\n    public disableClipPlane: boolean = false;\r\n\r\n    /**\r\n     * Defines whether or not to use world coordinates for wave deformations.\r\n     * The default value is false, meaning that the deformation is applied in object (local) space.\r\n     * You will probably need to set it to true if you are using instances or thin instances for your water objects.\r\n     */\r\n    @serialize(\"useWorldCoordinatesForWaveDeformation\")\r\n    private _useWorldCoordinatesForWaveDeformation = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public useWorldCoordinatesForWaveDeformation: boolean;\r\n\r\n    protected _renderTargets = new SmartArray<RenderTargetTexture>(16);\r\n\r\n    /*\r\n     * Private members\r\n     */\r\n    private _mesh: Nullable<AbstractMesh> = null;\r\n\r\n    private _refractionRTT: Nullable<RenderTargetTexture>;\r\n    private _reflectionRTT: Nullable<RenderTargetTexture>;\r\n\r\n    private _reflectionTransform: Matrix = Matrix.Zero();\r\n    private _lastTime: number = 0;\r\n    private _lastDeltaTime: number = 0;\r\n\r\n    private _useLogarithmicDepth: boolean;\r\n\r\n    private _waitingRenderList: Nullable<string[]>;\r\n\r\n    private _imageProcessingConfiguration: Nullable<ImageProcessingConfiguration>;\r\n    private _imageProcessingObserver: Nullable<Observer<ImageProcessingConfiguration>>;\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public get hasRenderTargetTextures(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     * @param name\r\n     * @param scene\r\n     * @param renderTargetSize\r\n     */\r\n    constructor(name: string, scene?: Scene, public renderTargetSize: Vector2 = new Vector2(512, 512)) {\r\n        super(name, scene);\r\n\r\n        this._createRenderTargets(this.getScene(), renderTargetSize);\r\n\r\n        // Create render targets\r\n        this.getRenderTargetTextures = (): SmartArray<RenderTargetTexture> => {\r\n            this._renderTargets.reset();\r\n            this._renderTargets.push(<RenderTargetTexture>this._reflectionRTT);\r\n            this._renderTargets.push(<RenderTargetTexture>this._refractionRTT);\r\n\r\n            return this._renderTargets;\r\n        };\r\n\r\n        this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\r\n        if (this._imageProcessingConfiguration) {\r\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\r\n                this._markAllSubMeshesAsImageProcessingDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get useLogarithmicDepth(): boolean {\r\n        return this._useLogarithmicDepth;\r\n    }\r\n\r\n    public set useLogarithmicDepth(value: boolean) {\r\n        this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\r\n        this._markAllSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    // Get / Set\r\n    public get refractionTexture(): Nullable<RenderTargetTexture> {\r\n        return this._refractionRTT;\r\n    }\r\n\r\n    public get reflectionTexture(): Nullable<RenderTargetTexture> {\r\n        return this._reflectionRTT;\r\n    }\r\n\r\n    // Methods\r\n    public addToRenderList(node: any): void {\r\n        if (this._refractionRTT && this._refractionRTT.renderList) {\r\n            this._refractionRTT.renderList.push(node);\r\n        }\r\n\r\n        if (this._reflectionRTT && this._reflectionRTT.renderList) {\r\n            this._reflectionRTT.renderList.push(node);\r\n        }\r\n    }\r\n\r\n    public enableRenderTargets(enable: boolean): void {\r\n        const refreshRate = enable ? 1 : 0;\r\n\r\n        if (this._refractionRTT) {\r\n            this._refractionRTT.refreshRate = refreshRate;\r\n        }\r\n\r\n        if (this._reflectionRTT) {\r\n            this._reflectionRTT.refreshRate = refreshRate;\r\n        }\r\n    }\r\n\r\n    public getRenderList(): Nullable<AbstractMesh[]> {\r\n        return this._refractionRTT ? this._refractionRTT.renderList : [];\r\n    }\r\n\r\n    public get renderTargetsEnabled(): boolean {\r\n        return !(this._refractionRTT && this._refractionRTT.refreshRate === 0);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new WaterMaterialDefines();\r\n        }\r\n\r\n        const defines = <WaterMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this.bumpTexture && MaterialFlags.BumpTextureEnabled) {\r\n                    if (!this.bumpTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.BUMP = true;\r\n                    }\r\n                }\r\n\r\n                if (MaterialFlags.ReflectionTextureEnabled) {\r\n                    defines.REFLECTION = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        if (defines._areMiscDirty) {\r\n            defines.FRESNELSEPARATE = this._fresnelSeparate;\r\n            defines.BUMPSUPERIMPOSE = this._bumpSuperimpose;\r\n            defines.BUMPAFFECTSREFLECTION = this._bumpAffectsReflection;\r\n            defines.USE_WORLD_COORDINATES = this._useWorldCoordinatesForWaveDeformation;\r\n        }\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Image processing\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            if (!this._imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n\r\n            this._imageProcessingConfiguration.prepareDefines(defines);\r\n\r\n            defines.IS_REFLECTION_LINEAR = this.reflectionTexture != null && !this.reflectionTexture.gammaSpace;\r\n            defines.IS_REFRACTION_LINEAR = this.refractionTexture != null && !this.refractionTexture.gammaSpace;\r\n        }\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Configure this\r\n        this._mesh = mesh;\r\n\r\n        if (this._waitingRenderList) {\r\n            for (let i = 0; i < this._waitingRenderList.length; i++) {\r\n                this.addToRenderList(scene.getNodeById(this._waitingRenderList[i]));\r\n            }\r\n\r\n            this._waitingRenderList = null;\r\n        }\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            if (defines.LOGARITHMICDEPTH) {\r\n                fallbacks.addFallback(0, \"LOGARITHMICDEPTH\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"water\";\r\n            const join = defines.toString();\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vLightsType\",\r\n                \"vDiffuseColor\",\r\n                \"vSpecularColor\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"vNormalInfos\",\r\n                \"mBones\",\r\n                \"normalMatrix\",\r\n                \"logarithmicDepthConstant\",\r\n\r\n                // Water\r\n                \"reflectionViewProjection\",\r\n                \"windDirection\",\r\n                \"waveLength\",\r\n                \"time\",\r\n                \"windForce\",\r\n                \"cameraPosition\",\r\n                \"bumpHeight\",\r\n                \"waveHeight\",\r\n                \"waterColor\",\r\n                \"waterColor2\",\r\n                \"colorBlendFactor\",\r\n                \"colorBlendFactor2\",\r\n                \"waveSpeed\",\r\n                \"waveCount\",\r\n            ];\r\n            const samplers = [\r\n                \"normalSampler\",\r\n                // Water\r\n                \"refractionSampler\",\r\n                \"reflectionSampler\",\r\n            ];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            if (ImageProcessingConfiguration) {\r\n                ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\r\n                ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\r\n            }\r\n\r\n            addClipPlaneUniforms(uniforms);\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights,\r\n            });\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <WaterMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect || !this._mesh) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this.bumpTexture && MaterialFlags.BumpTextureEnabled) {\r\n                this._activeEffect.setTexture(\"normalSampler\", this.bumpTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vNormalInfos\", this.bumpTexture.coordinatesIndex, this.bumpTexture.level);\r\n                this._activeEffect.setMatrix(\"normalMatrix\", this.bumpTexture.getTextureMatrix());\r\n            }\r\n            // Clip plane\r\n            bindClipPlane(effect, this, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            scene.bindEyePosition(effect);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        // Log. depth\r\n        MaterialHelper.BindLogDepth(defines, this._activeEffect, scene);\r\n\r\n        // Water\r\n        if (MaterialFlags.ReflectionTextureEnabled) {\r\n            this._activeEffect.setTexture(\"refractionSampler\", this._refractionRTT);\r\n            this._activeEffect.setTexture(\"reflectionSampler\", this._reflectionRTT);\r\n        }\r\n\r\n        const wrvp = this._reflectionTransform.multiply(scene.getProjectionMatrix());\r\n\r\n        // Add delta time. Prevent adding delta time if it hasn't changed.\r\n        const deltaTime = scene.getEngine().getDeltaTime();\r\n        if (deltaTime !== this._lastDeltaTime) {\r\n            this._lastDeltaTime = deltaTime;\r\n            this._lastTime += this._lastDeltaTime;\r\n        }\r\n\r\n        this._activeEffect.setMatrix(\"reflectionViewProjection\", wrvp);\r\n        this._activeEffect.setVector2(\"windDirection\", this.windDirection);\r\n        this._activeEffect.setFloat(\"waveLength\", this.waveLength);\r\n        this._activeEffect.setFloat(\"time\", this._lastTime / 100000);\r\n        this._activeEffect.setFloat(\"windForce\", this.windForce);\r\n        this._activeEffect.setFloat(\"waveHeight\", this.waveHeight);\r\n        this._activeEffect.setFloat(\"bumpHeight\", this.bumpHeight);\r\n        this._activeEffect.setColor4(\"waterColor\", this.waterColor, 1.0);\r\n        this._activeEffect.setFloat(\"colorBlendFactor\", this.colorBlendFactor);\r\n        this._activeEffect.setColor4(\"waterColor2\", this.waterColor2, 1.0);\r\n        this._activeEffect.setFloat(\"colorBlendFactor2\", this.colorBlendFactor2);\r\n        this._activeEffect.setFloat(\"waveSpeed\", this.waveSpeed);\r\n        this._activeEffect.setFloat(\"waveCount\", this.waveCount);\r\n\r\n        // image processing\r\n        if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\r\n            this._imageProcessingConfiguration.bind(this._activeEffect);\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    private _createRenderTargets(scene: Scene, renderTargetSize: Vector2): void {\r\n        // Render targets\r\n        this._refractionRTT = new RenderTargetTexture(name + \"_refraction\", { width: renderTargetSize.x, height: renderTargetSize.y }, scene, false, true);\r\n        this._refractionRTT.wrapU = Constants.TEXTURE_MIRROR_ADDRESSMODE;\r\n        this._refractionRTT.wrapV = Constants.TEXTURE_MIRROR_ADDRESSMODE;\r\n        this._refractionRTT.ignoreCameraViewport = true;\r\n\r\n        this._reflectionRTT = new RenderTargetTexture(name + \"_reflection\", { width: renderTargetSize.x, height: renderTargetSize.y }, scene, false, true);\r\n        this._reflectionRTT.wrapU = Constants.TEXTURE_MIRROR_ADDRESSMODE;\r\n        this._reflectionRTT.wrapV = Constants.TEXTURE_MIRROR_ADDRESSMODE;\r\n        this._reflectionRTT.ignoreCameraViewport = true;\r\n\r\n        let isVisible: boolean;\r\n        let clipPlane: Nullable<Plane> = null;\r\n        let savedViewMatrix: Matrix;\r\n        const mirrorMatrix = Matrix.Zero();\r\n\r\n        this._refractionRTT.onBeforeRender = () => {\r\n            if (this._mesh) {\r\n                isVisible = this._mesh.isVisible;\r\n                this._mesh.isVisible = false;\r\n            }\r\n\r\n            // Clip plane\r\n            if (!this.disableClipPlane) {\r\n                clipPlane = scene.clipPlane;\r\n\r\n                const positiony = this._mesh ? this._mesh.absolutePosition.y : 0.0;\r\n                scene.clipPlane = Plane.FromPositionAndNormal(new Vector3(0, positiony + 0.05, 0), new Vector3(0, 1, 0));\r\n            }\r\n        };\r\n\r\n        this._refractionRTT.onAfterRender = () => {\r\n            if (this._mesh) {\r\n                this._mesh.isVisible = isVisible;\r\n            }\r\n\r\n            // Clip plane\r\n            if (!this.disableClipPlane) {\r\n                scene.clipPlane = clipPlane;\r\n            }\r\n        };\r\n\r\n        this._reflectionRTT.onBeforeRender = () => {\r\n            if (this._mesh) {\r\n                isVisible = this._mesh.isVisible;\r\n                this._mesh.isVisible = false;\r\n            }\r\n\r\n            // Clip plane\r\n            if (!this.disableClipPlane) {\r\n                clipPlane = scene.clipPlane;\r\n\r\n                const positiony = this._mesh ? this._mesh.absolutePosition.y : 0.0;\r\n                scene.clipPlane = Plane.FromPositionAndNormal(new Vector3(0, positiony - 0.05, 0), new Vector3(0, -1, 0));\r\n\r\n                Matrix.ReflectionToRef(scene.clipPlane, mirrorMatrix);\r\n            }\r\n\r\n            // Transform\r\n            savedViewMatrix = scene.getViewMatrix();\r\n\r\n            mirrorMatrix.multiplyToRef(savedViewMatrix, this._reflectionTransform);\r\n            scene.setTransformMatrix(this._reflectionTransform, scene.getProjectionMatrix());\r\n            scene._mirroredCameraPosition = Vector3.TransformCoordinates((<Camera>scene.activeCamera).position, mirrorMatrix);\r\n        };\r\n\r\n        this._reflectionRTT.onAfterRender = () => {\r\n            if (this._mesh) {\r\n                this._mesh.isVisible = isVisible;\r\n            }\r\n\r\n            // Clip plane\r\n            scene.clipPlane = clipPlane;\r\n\r\n            // Transform\r\n            scene.setTransformMatrix(savedViewMatrix, scene.getProjectionMatrix());\r\n            scene._mirroredCameraPosition = null;\r\n        };\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = [];\r\n\r\n        if (this.bumpTexture && this.bumpTexture.animations && this.bumpTexture.animations.length > 0) {\r\n            results.push(this.bumpTexture);\r\n        }\r\n        if (this._reflectionRTT && this._reflectionRTT.animations && this._reflectionRTT.animations.length > 0) {\r\n            results.push(this._reflectionRTT);\r\n        }\r\n        if (this._refractionRTT && this._refractionRTT.animations && this._refractionRTT.animations.length > 0) {\r\n            results.push(this._refractionRTT);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._bumpTexture) {\r\n            activeTextures.push(this._bumpTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.bumpTexture) {\r\n            this.bumpTexture.dispose();\r\n        }\r\n\r\n        let index = this.getScene().customRenderTargets.indexOf(<RenderTargetTexture>this._refractionRTT);\r\n        if (index != -1) {\r\n            this.getScene().customRenderTargets.splice(index, 1);\r\n        }\r\n        index = -1;\r\n        index = this.getScene().customRenderTargets.indexOf(<RenderTargetTexture>this._reflectionRTT);\r\n        if (index != -1) {\r\n            this.getScene().customRenderTargets.splice(index, 1);\r\n        }\r\n\r\n        if (this._reflectionRTT) {\r\n            this._reflectionRTT.dispose();\r\n        }\r\n        if (this._refractionRTT) {\r\n            this._refractionRTT.dispose();\r\n        }\r\n\r\n        // Remove image-processing observer\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): WaterMaterial {\r\n        return SerializationHelper.Clone(() => new WaterMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.WaterMaterial\";\r\n\r\n        serializationObject.renderList = [];\r\n        if (this._refractionRTT && this._refractionRTT.renderList) {\r\n            for (let i = 0; i < this._refractionRTT.renderList.length; i++) {\r\n                serializationObject.renderList.push(this._refractionRTT.renderList[i].id);\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"WaterMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): WaterMaterial {\r\n        const mat = SerializationHelper.Parse(() => new WaterMaterial(source.name, scene), source, scene, rootUrl);\r\n        mat._waitingRenderList = source.renderList;\r\n\r\n        return mat;\r\n    }\r\n\r\n    public static CreateDefaultMesh(name: string, scene: Scene): Mesh {\r\n        const mesh = CreateGround(name, { width: 512, height: 512, subdivisions: 32, updatable: false }, scene);\r\n        return mesh;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.WaterMaterial\", WaterMaterial);\r\n","/* eslint-disable import/no-internal-modules */\nimport * as MatLib from \"../index\";\n/**\n * Legacy support, defining window.BABYLON.GridMaterial... (global variable).\n *\n * This is the entry point for the UMD module.\n * The entry point for a future ESM package should be index.ts\n */\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\nif (typeof globalObject !== \"undefined\") {\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\n    for (const mat in MatLib) {\n        (<any>globalObject).BABYLON[mat] = (<any>MatLib)[mat];\n    }\n}\nexport * from \"../index\";\n","import * as materials from \"materials/legacy/legacy\";\r\nexport { materials };\r\nexport default materials;\r\n"],"names":["root","factory","exports","module","require","define","amd","self","global","this","__WEBPACK_EXTERNAL_MODULE__520__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","extendStatics","b","setPrototypeOf","__proto__","Array","p","__extends","TypeError","String","__","constructor","create","__decorate","decorators","target","desc","c","arguments","length","getOwnPropertyDescriptor","Reflect","decorate","i","DIFFUSE","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","CLIPPLANE5","CLIPPLANE6","ALPHATEST","POINTSIZE","FOG","NORMAL","UV1","UV2","VERTEXCOLOR","VERTEXALPHA","NUM_BONE_INFLUENCERS","BonesPerMesh","INSTANCES","INSTANCESCOLOR","NDOTL","CUSTOMUSERLIGHTING","CELLBASIC","DEPTHPREPASS","IMAGEPROCESSINGPOSTPROCESS","SKIPFINALCOLORCLAMP","rebuild","MaterialDefines","name","scene","diffuseColor","Color3","_computeHighLevel","_disableLighting","_maxSimultaneousLights","needAlphaBlending","alpha","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","mesh","subMesh","useInstances","isFrozen","effect","_wasPreviouslyReady","_wasPreviouslyUsingInstances","materialDefines","CellMaterialDefines","defines","getScene","_isReadyForSubMesh","engine","getEngine","_areTexturesDirty","_needUVs","texturesEnabled","_diffuseTexture","MaterialFlags","DiffuseTextureEnabled","isReady","computeHighLevel","MaterialHelper","PrepareDefinesForMisc","pointsCloud","fogEnabled","_shouldTurnAlphaTestOn","_needNormals","PrepareDefinesForLights","PrepareDefinesForFrameBoundValues","PrepareDefinesForAttributes","isDirty","markAsProcessed","resetCachedMaterial","fallbacks","EffectFallbacks","addFallback","HandleFallbacksForShadows","maxSimultaneousLights","addCPUSkinningFallback","imageProcessingConfiguration","applyByPostProcess","attribs","VertexBuffer","PositionKind","push","NormalKind","UVKind","UV2Kind","ColorKind","PrepareAttributesForBones","PrepareAttributesForInstances","join","toString","uniforms","samplers","uniformBuffers","addClipPlaneUniforms","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","setEffect","createEffect","attributes","onCompiled","onError","indexParameters","_materialContext","_renderId","getRenderId","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","getTransformMatrix","BindBonesParameters","_mustRebind","setTexture","setFloat2","coordinatesIndex","level","getTextureMatrix","bindClipPlane","setFloat","pointSize","bindEyePosition","setColor4","visibility","lightsEnabled","disableLighting","BindLights","applyFog","fogMode","Scene","FOGMODE_NONE","getViewMatrix","BindFogParameters","_afterBind","getAnimatables","results","animations","getActiveTextures","activeTextures","hasTexture","texture","dispose","forceDisposeEffect","getClassName","clone","SerializationHelper","Clone","CellMaterial","serialize","serializationObject","customType","Parse","source","rootUrl","serializeAsTexture","expandToProperty","serializeAsColor3","PushMaterial","RegisterClass","CustomParts","ShaderSpecialParts","customShaderNameResolve","Builder","FragmentShader","Effect","ShadersStore","VertexShader","AttachAfterBind","_newUniformInstances","el","ea","split","setVector2","setVector3","setVector4","_newSamplerInstances","ReviewUniform","arr","_newUniforms","ind","_customUniform","indexOf","replace","shaderName","_customAttributes","_isCreatedShader","_createdShaderName","CustomMaterial","ShaderIndexer","fn_afterBind","bind","m","Vertex_Begin","Vertex_Definitions","Vertex_MainBegin","Vertex_Before_PositionUpdated","Vertex_Before_NormalUpdated","Vertex_MainEnd","Vertex_After_WorldPosComputed","Fragment_Begin","Fragment_MainBegin","Fragment_Definitions","Fragment_Custom_Diffuse","Fragment_Custom_Alpha","Fragment_Before_Lights","Fragment_Before_FragColor","Fragment_MainEnd","Fragment_Before_Fog","AddUniform","kind","param","AddAttribute","shaderPart","StandardMaterial","ShaderAlebdoParts","IncludesShadersStore","options","processFinalCode","type","code","sci","ShaderCodeInliner","inlineToken","processCode","PBRCustomMaterial","Fragment_Custom_Albedo","Fragment_Custom_MetallicRoughness","Fragment_Custom_MicroSurface","Fragment_Before_FinalColorComposition","PBRMaterial","ShaderStore","speed","_scaledDiffuse","_lastTime","FireMaterialDefines","_opacityTexture","_areMiscDirty","forcePointsCloud","transformFeedbackVaryings","_distortionTexture","getDeltaTime","FireMaterial","asArray","material","FromArray","id","Tags","AddTagsTo","tags","backFaceCulling","wireframe","Texture","HEIGHTMAP","HIGHLEVEL","furLength","furAngle","furColor","furOffset","furSpacing","furGravity","Vector3","furSpeed","furDensity","furOcclusion","highLevelFur","_furTime","furTime","updateFur","_meshes","offsetFur","diffuseTexture","furTexture","FurMaterialDefines","heightTexture","getCaps","maxVertexTextureImageUnits","markAsUnprocessed","getCachedMaterial","_heightTexture","mat","FurMaterial","sourceMeshName","quality","executeWhenReady","sourceMesh","getMeshByName","GenerateTexture","FurifyMesh","DynamicTexture","context","getContext","fillStyle","Math","floor","random","fillRect","getSize","width","height","update","wrapU","WRAP_ADDRESSMODE","wrapV","meshes","materials","pop","EnableFor","offsetMesh","skeleton","position","Zero","parent","serializeAsVector3","EMISSIVE","topColor","topColorAlpha","bottomColor","bottomColorAlpha","offset","scale","smoothness","GradientMaterialDefines","GradientMaterial","OPACITY","TRANSPARENT","PREMULTIPLYALPHA","MAX_LINE","THIN_INSTANCES","mainColor","Black","lineColor","Teal","gridRatio","gridOffset","majorUnitFrequency","minorUnitVisibility","opacity","preMultiplyAlpha","useMaxLine","_gridControl","Vector4","needAlphaBlendingForMesh","GridMaterialDefines","OpacityTextureEnabled","THIN_INSTANCE","getProjectionMatrix","setColor3","x","y","round","z","w","GridMaterial","LIGHT0","LIGHT1","LIGHT2","LIGHT3","SPOTLIGHT0","SPOTLIGHT1","SPOTLIGHT2","SPOTLIGHT3","HEMILIGHT0","HEMILIGHT1","HEMILIGHT2","HEMILIGHT3","DIRLIGHT0","DIRLIGHT1","DIRLIGHT2","DIRLIGHT3","POINTLIGHT0","POINTLIGHT1","POINTLIGHT2","POINTLIGHT3","SHADOW0","SHADOW1","SHADOW2","SHADOW3","SHADOWS","SHADOWESM0","SHADOWESM1","SHADOWESM2","SHADOWESM3","SHADOWPOISSON0","SHADOWPOISSON1","SHADOWPOISSON2","SHADOWPOISSON3","SHADOWPCF0","SHADOWPCF1","SHADOWPCF2","SHADOWPCF3","SHADOWPCSS0","SHADOWPCSS1","SHADOWPCSS2","SHADOWPCSS3","UNLIT","movingSpeed","lowFrequencySpeed","fogDensity","_unlit","LavaMaterialDefines","noiseTexture","fogColor","LavaMaterial","SPECULARTERM","MIXMAP2","specularColor","specularPower","MixMaterialDefines","_mixTexture1","_diffuseTexture1","_diffuseTexture2","_diffuseTexture3","_diffuseTexture4","_mixTexture2","_diffuseTexture5","_diffuseTexture6","_diffuseTexture7","_diffuseTexture8","uScale","vScale","MixMaterial","LIGHTING","NormalMaterialDefines","NormalMaterial","_needAlphaBlending","shadowColor","_activeLight","light","_getFirstShadowLightForMesh","lightSources","shadowEnabled","ShadowOnlyMaterialDefines","lightPosition","splice","shadowGenerator","getShadowGenerator","csg","autoCalcDepthBounds","ShadowOnlyMaterial","SimpleMaterialDefines","SimpleMaterial","DITHER","luminance","turbidity","rayleigh","mieCoefficient","mieDirectionalG","distance","inclination","azimuth","sunPosition","useSunPosition","cameraOffset","up","Up","dithering","_cameraPosition","_skyOrientation","Quaternion","SkyMaterialDefines","markAsMiscDirty","camera","activeCamera","cameraWorldMatrix","getWorldMatrix","theta","PI","phi","cos","sin","FromUnitVectorsToRef","UpReadOnly","rotateByQuaternionToRef","SkyMaterial","BUMP","TerrainMaterialDefines","mixTexture","diffuseTexture1","diffuseTexture2","diffuseTexture3","bumpTexture1","bumpTexture2","bumpTexture3","BumpTextureEnabled","_mixTexture","standardDerivatives","_bumpTexture1","_bumpTexture2","_bumpTexture3","TerrainMaterial","DIFFUSEX","DIFFUSEY","DIFFUSEZ","BUMPX","BUMPY","BUMPZ","NONUNIFORMSCALING","tileSize","TriPlanarMaterialDefines","textures","diffuseTextureX","diffuseTextureY","diffuseTextureZ","textureDefines","normalTextureX","normalTextureY","normalTextureZ","_diffuseTextureX","_diffuseTextureY","_diffuseTextureZ","_normalTextureX","_normalTextureY","_normalTextureZ","TriPlanarMaterial","REFLECTION","LOGARITHMICDEPTH","USE_REVERSE_DEPTHBUFFER","FRESNELSEPARATE","BUMPSUPERIMPOSE","BUMPAFFECTSREFLECTION","USE_WORLD_COORDINATES","IMAGEPROCESSING","VIGNETTE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTEBLENDMODEOPAQUE","TONEMAPPING","TONEMAPPING_ACES","CONTRAST","EXPOSURE","COLORCURVES","COLORGRADING","COLORGRADING3D","SAMPLER3DGREENDEPTH","SAMPLER3DBGRMAP","renderTargetSize","Vector2","windForce","windDirection","waveHeight","bumpHeight","_bumpSuperimpose","_fresnelSeparate","_bumpAffectsReflection","waterColor","colorBlendFactor","waterColor2","colorBlendFactor2","waveLength","waveSpeed","waveCount","disableClipPlane","_useWorldCoordinatesForWaveDeformation","_renderTargets","SmartArray","_mesh","_reflectionTransform","Matrix","_lastDeltaTime","_createRenderTargets","getRenderTargetTextures","reset","_reflectionRTT","_refractionRTT","_imageProcessingConfiguration","_imageProcessingObserver","onUpdateParameters","add","_markAllSubMeshesAsImageProcessingDirty","_useLogarithmicDepth","fragmentDepthSupported","_markAllSubMeshesAsMiscDirty","addToRenderList","node","renderList","enableRenderTargets","enable","refreshRate","getRenderList","WaterMaterialDefines","bumpTexture","ReflectionTextureEnabled","_areImageProcessingDirty","prepareDefines","IS_REFLECTION_LINEAR","reflectionTexture","gammaSpace","IS_REFRACTION_LINEAR","refractionTexture","_waitingRenderList","getNodeById","ImageProcessingConfiguration","PrepareUniforms","PrepareSamplers","BindLogDepth","wrvp","multiply","deltaTime","isVisible","RenderTargetTexture","Constants","TEXTURE_MIRROR_ADDRESSMODE","ignoreCameraViewport","savedViewMatrix","clipPlane","mirrorMatrix","onBeforeRender","positiony","absolutePosition","Plane","FromPositionAndNormal","onAfterRender","ReflectionToRef","multiplyToRef","setTransformMatrix","_mirroredCameraPosition","TransformCoordinates","_bumpTexture","index","customRenderTargets","remove","WaterMaterial","CreateDefaultMesh","CreateGround","subdivisions","updatable","serializeAsVector2","globalObject","BABYLON"],"sourceRoot":""}